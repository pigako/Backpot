{"version":3,"file":"static/webpack/static\\development\\pages\\signup.js.6bd5aae257b156cc3843.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Button from '../components/designs/Button';\r\nimport { SIGN_UP_REQUEST } from '../reducers/user';\r\n\r\nconst SignUpDesign = styled.div`\r\n  height: 100%;\r\n`;\r\n\r\nconst Subject = styled.h1`\r\n  font-size: 2rem;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst SignUpForm = styled.form`\r\n  margin-top: 20px;\r\n  height: 100%;\r\n  width: 90%;\r\n`;\r\n\r\nconst SDiv = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  & > label {\r\n    flex: 10;\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  & > button {\r\n  }\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: inline-block;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  outline: none;\r\n  border: solid 1px #339af0;\r\n  border-radius: 4px;\r\n  padding-left: 10px;\r\n  margin-bottom: 10px;\r\n\r\n  width: 100%;\r\n  height: 2rem;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst ErrorLabel = styled.label`\r\n  display: inline-block;\r\n  color: red;\r\n`;\r\n\r\nconst LoginFormButtonDiv = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n  & button {\r\n    margin-left: 10px;\r\n  }\r\n`;\r\n\r\nconst LoadingImg = styled.img`\r\n  margin-top: 4px;\r\n  height: 1.5rem;\r\n`;\r\n\r\nconst SignUp = () => {\r\n  const { isSigningUp } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n  const [userId, setUserId] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordCheck, setPasswordCheck] = useState('');\r\n  const [nickname, setNickname] = useState('');\r\n  const [errorReason, setErrorReason] = useState({\r\n    userIdCheck: false,\r\n    passwordError: '',\r\n    passwordCheckError: '',\r\n    nicknameCheck: false,\r\n  });\r\n\r\n  const {\r\n    userIdCheck,\r\n    passwordError,\r\n    passwordCheckError,\r\n    nicknameCheck,\r\n  } = errorReason;\r\n\r\n  const onChangeUserId = useCallback(e => {\r\n    setUserId(e.target.value);\r\n  }, []);\r\n\r\n  const onChangePassword = useCallback(e => {\r\n    setPassword(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeNickname = useCallback(e => {\r\n    setNickname(e.target.value);\r\n  }, []);\r\n\r\n  const onChangePasswordCheck = useCallback(\r\n    e => {\r\n      if (e.target.value !== password) {\r\n        setErrorReason({\r\n          ...errorReason,\r\n          passwordCheckError: '비밀번호가 일치하지 않습니다.',\r\n        });\r\n      } else {\r\n        setErrorReason({\r\n          ...errorReason,\r\n          passwordCheckError: '',\r\n        });\r\n      }\r\n      setPasswordCheck(e.target.value);\r\n    },\r\n    [password, errorReason, passwordCheckError],\r\n  );\r\n\r\n  const onCheckUserId = useCallback(\r\n    async e => {\r\n      if (userId.trim() === '') {\r\n        return alert('아이디를 입력해주세요');\r\n      }\r\n      const result = await axios.post(`/user/check`, {\r\n        type: 'userId',\r\n        userId,\r\n      });\r\n      console.log('result', result);\r\n      if (result.data) {\r\n        setErrorReason({\r\n          ...errorReason,\r\n          userIdCheck: true,\r\n        });\r\n        alert('사용 가능한 아이디입니다.');\r\n      } else {\r\n        alert('이미 사용중인 아이디입니다.');\r\n      }\r\n    },\r\n    [errorReason, userId],\r\n  );\r\n\r\n  const onCheckNickname = useCallback(\r\n    async e => {\r\n      if (nickname.trim() === '') {\r\n        return alert('닉네임을 입력해주세요');\r\n      }\r\n      const result = await axios.post(`/user/check`, {\r\n        type: 'nickname',\r\n        nickname,\r\n      });\r\n      if (result.data) {\r\n        setErrorReason({\r\n          ...errorReason,\r\n          nicknameCheck: true,\r\n        });\r\n        alert('사용 가능한 닉네임입니다.');\r\n      } else {\r\n        alert('이미 사용중인 닉네임입니다.');\r\n      }\r\n    },\r\n    [errorReason, nickname],\r\n  );\r\n\r\n  const onSubmitForm = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!userIdCheck) {\r\n        return alert('아이디 중복확인을 해주세요.!');\r\n      }\r\n      if (!nicknameCheck) {\r\n        return alert('닉네임 중복확인을 해주세요.!');\r\n      }\r\n      dispatch({\r\n        type: SIGN_UP_REQUEST,\r\n        data: {\r\n          userId,\r\n          password,\r\n          nickname,\r\n        },\r\n      });\r\n    },\r\n    [userIdCheck, nicknameCheck, userId, password, nickname],\r\n  );\r\n\r\n  return (\r\n    <SignUpDesign>\r\n      <Subject>회원가입</Subject>\r\n      <SignUpForm onSubmit={onSubmitForm}>\r\n        <div>\r\n          <SDiv>\r\n            <Label htmlFor=\"user-id\">아이디</Label>\r\n\r\n            <Button type=\"button\" onClick={onCheckUserId}>\r\n              중복확인\r\n            </Button>\r\n          </SDiv>\r\n          <Input\r\n            htmlFor=\"user-id\"\r\n            name=\"userId\"\r\n            value={userId}\r\n            onChange={onChangeUserId}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <Label htmlFor=\"user-password\">비밀번호</Label>\r\n          <br />\r\n          <Input\r\n            htmlFor=\"user-password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={onChangePassword}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <Label htmlFor=\"user-password-Check\">비밀번호체크</Label>\r\n          <br />\r\n          <Input\r\n            htmlFor=\"user-password-Check\"\r\n            name=\"passwordCheck\"\r\n            type=\"password\"\r\n            value={passwordCheck}\r\n            onChange={onChangePasswordCheck}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <SDiv>\r\n            <Label htmlFor=\"user-nickname\">닉네임</Label>\r\n            <Button type=\"button\" onClick={onCheckNickname}>\r\n              중복확인\r\n            </Button>\r\n          </SDiv>\r\n          <Input\r\n            htmlFor=\"user-nickname\"\r\n            name=\"nickname\"\r\n            value={nickname}\r\n            onChange={onChangeNickname}\r\n            required\r\n          />\r\n        </div>\r\n        <LoginFormButtonDiv>\r\n          <Button type=\"submit\" color=\"pink\">\r\n            {isSigningUp ? (\r\n              <LoadingImg src=\"/static/icons/loading_pink.gif\" />\r\n            ) : (\r\n              `가입하기`\r\n            )}\r\n          </Button>\r\n        </LoginFormButtonDiv>\r\n        <ErrorLabel>{passwordCheckError}</ErrorLabel>\r\n      </SignUpForm>\r\n    </SignUpDesign>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AADA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AACA;AACA;AAJA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAFA;AAIA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAFA;AACA;AALA;AAIA;AAIA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAFA;AACA;AALA;AAIA;AACA;AAGA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAIA;AAGA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAEA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}