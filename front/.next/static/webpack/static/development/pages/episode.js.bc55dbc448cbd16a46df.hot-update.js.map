{"version":3,"file":"static/webpack/static\\development\\pages\\episode.js.bc55dbc448cbd16a46df.hot-update.js","sources":["webpack:///./pages/episode/index.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\nimport Helmet from 'react-helmet';\r\nimport Router from 'next/router';\r\n\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  ADD_RECOMMEND_REQUEST,\r\n} from '../../reducers/episode';\r\nimport CommnetCard from '../../components/CommentCard';\r\nimport Button from '../../components/designs/Button';\r\n\r\nconst EpisodeDiv = styled.div`\r\n  width: 98%;\r\n  margin: 1rem 0rem 0rem 1rem;\r\n`;\r\nconst EpisodeTopDiv = styled.div`\r\n  border-bottom: solid 2px #495057;\r\n  position: relative;\r\n`;\r\nconst BookTitle = styled.h1`\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\nconst EpisodeTitle = styled.h1`\r\n  font-weight: bold;\r\n  font-size: 2rem;\r\n  margin-bottom: 1rem;\r\n`;\r\nconst TopButtonDiv = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 5%;\r\n  right: 1%;\r\n`;\r\nconst EpisodeSummaryDataDiv = styled.div`\r\n  border-bottom: solid 2px #495057;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n`;\r\nconst EpisodeSummaryContentDiv = styled.div`\r\n  padding: 1rem;\r\n  font-size: 1rem;\r\n`;\r\nconst LeftLabel = styled.label`\r\n  margin-right: 1rem;\r\n`;\r\nconst RightLabel = styled.label`\r\n  font-weight: bold;\r\n`;\r\nconst EpisodeContentDiv = styled.div`\r\n  margin: 1.5rem;\r\n  font-size: 1rem;\r\n  line-height: 1.5rem;\r\n`;\r\nconst EpisodeComment = styled.div`\r\n  border-top: solid 3px #495057;\r\n  margin-bottom: 2rem;\r\n`;\r\nconst EpisodeCommentCountDiv = styled.div`\r\n  height: 2rem;\r\n  background: #e7e7e7;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: solid 3px #495057;\r\n  & > label {\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\nconst EpisodePrevNextDiv = styled.div`\r\n  height: 8rem;\r\n  width: 100%;\r\n\r\n  border-top: solid 2px #495057;\r\n  padding-top: 1rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst PrevEpisodeDiv = styled.div`\r\n  width: 49.5%;\r\n  display: inline-block;\r\n`;\r\nconst PrevButton = styled(Button)`\r\n  height: 8rem;\r\n  display: inline-block;\r\n`;\r\nconst PrveEpisodeTitle = styled.label`\r\n  margin-left: 1rem;\r\n`;\r\nconst NextEpisodeDiv = styled.div`\r\n  width: 49.5%;\r\n  float: right;\r\n  display: flex;\r\n\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n`;\r\nconst NextButton = styled(Button)`\r\n  height: 8rem;\r\n  display: block;\r\n  float: right;\r\n`;\r\nconst NextEpisodeTitle = styled.label`\r\n  margin-right: 1rem;\r\n`;\r\nconst LoadingImg = styled.img`\r\n  margin-top: 4px;\r\n  height: 1.5rem;\r\n`;\r\nconst Episode = () => {\r\n  const {\r\n    episode,\r\n    isDeletingEpisode,\r\n    isDeletedEpisode,\r\n    isRecommending,\r\n  } = useSelector(state => state.episode);\r\n  const { id: myId } = useSelector(state => state.user.me) || '';\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onGoList = useCallback(() => {\r\n    Router.push(\r\n      { pathname: `/book`, query: { bookid: episode.Book.id } },\r\n      `/book/${episode.Book.id}`,\r\n    );\r\n  }, [episode && episode.Book]);\r\n\r\n  const onUpdateEpisode = useCallback(() => {\r\n    Router.push(\r\n      {\r\n        pathname: `/episode/update`,\r\n        query: { episodeid: episode.id },\r\n      },\r\n      `/episode/update/${episode.id}`,\r\n    );\r\n  }, [episode && episode.id]);\r\n\r\n  const onDeleteEpisode = useCallback(() => {}, []);\r\n  const onRecommenmdEpisode = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_RECOMMEND_REQUEST,\r\n      id: episode.id,\r\n    });\r\n  }, [episode && episode.id]);\r\n\r\n  const onGoPrevEpisode = useCallback(() => {\r\n    if (!episode.prev) {\r\n      return alert('이전글이 존재하지 않습니다.');\r\n    }\r\n    Router.push(\r\n      {\r\n        pathname: '/episode',\r\n        query: { id: episode.prev.id },\r\n      },\r\n      `/episode/${episode.prev.id}`,\r\n    );\r\n  }, [episode && episode.prev && episode.prev.id]);\r\n  const onGoNextEpisode = useCallback(() => {\r\n    if (!episode.next) {\r\n      return alert('다음글이 존재하지 않습니다.');\r\n    }\r\n    Router.push(\r\n      {\r\n        pathname: '/episode',\r\n        query: { id: episode.next.id },\r\n      },\r\n      `/episode/${episode.next.id}`,\r\n    );\r\n  }, [episode && episode.next && episode.next.id]);\r\n\r\n  return (\r\n    <EpisodeDiv>\r\n      <Helmet>\r\n        <title>{episode && episode.Book.name}</title>\r\n        <style type=\"text/css\">\r\n          {`\r\n            .ck-editor__editable { height: 200px;}\r\n            .ck.ck-reset.ck-editor.ck-rounded-corners {margin: 1.5rem;}\r\n          `}\r\n        </style>\r\n      </Helmet>\r\n      <EpisodeTopDiv>\r\n        <BookTitle>{episode && episode.Book.name}</BookTitle>\r\n        <EpisodeTitle>{episode && episode.title}</EpisodeTitle>\r\n        <TopButtonDiv>\r\n          {episode && episode.Book.User.id === myId ? (\r\n            <Button onClick={onUpdateEpisode}>수정</Button>\r\n          ) : null}\r\n          {episode && episode.Book.User.id === myId ? (\r\n            <Button color=\"pink\" onClick={onDeleteEpisode}>\r\n              {isDeletingEpisode ? (\r\n                <LoadingImg src=\"/static/icons/loading_pink.gif\" />\r\n              ) : (\r\n                '삭제'\r\n              )}\r\n            </Button>\r\n          ) : null}\r\n          {myId ? (\r\n            <Button onClick={onRecommenmdEpisode}>\r\n              {isRecommending ? (\r\n                <LoadingImg src=\"/static/icons/loading_blue.gif\" />\r\n              ) : (\r\n                '추천'\r\n              )}\r\n            </Button>\r\n          ) : null}\r\n          <Button onClick={onGoList}>목록</Button>\r\n          <Button>\r\n            <a href=\"#comment\">댓글</a>\r\n          </Button>\r\n        </TopButtonDiv>\r\n      </EpisodeTopDiv>\r\n      <EpisodeSummaryDataDiv>\r\n        <EpisodeSummaryContentDiv>\r\n          <LeftLabel>작성</LeftLabel>\r\n          <RightLabel>\r\n            {episode && moment(episode.createdAt).format('YY.MM.DD HH:mm')}\r\n          </RightLabel>\r\n        </EpisodeSummaryContentDiv>\r\n        <EpisodeSummaryContentDiv>\r\n          <LeftLabel>조회</LeftLabel>\r\n          <RightLabel>{episode && episode.views}</RightLabel>\r\n        </EpisodeSummaryContentDiv>\r\n        <EpisodeSummaryContentDiv>\r\n          <LeftLabel>추천</LeftLabel>\r\n          <RightLabel>{episode && episode.recommends}</RightLabel>\r\n        </EpisodeSummaryContentDiv>\r\n        <EpisodeSummaryContentDiv>\r\n          <LeftLabel>작가</LeftLabel>\r\n          <RightLabel>{episode && episode.Book.User.nickname}</RightLabel>\r\n          {' 님'}\r\n        </EpisodeSummaryContentDiv>\r\n      </EpisodeSummaryDataDiv>\r\n      <EpisodeContentDiv\r\n        dangerouslySetInnerHTML={{ __html: episode && episode.content }}\r\n      />\r\n      <EpisodePrevNextDiv>\r\n        <PrevEpisodeDiv>\r\n          <PrevButton onClick={onGoPrevEpisode}>{'< Prev'}</PrevButton>\r\n          <PrveEpisodeTitle>\r\n            {(episode && episode.prev && episode.prev.title) ||\r\n              '이전글이 존재하지 않습니다.'}\r\n          </PrveEpisodeTitle>\r\n        </PrevEpisodeDiv>\r\n        <NextEpisodeDiv>\r\n          <NextEpisodeTitle>\r\n            {(episode && episode.next && episode.next.title) ||\r\n              '다음글이 존재하지 않습니다.'}\r\n          </NextEpisodeTitle>\r\n          <NextButton onClick={onGoNextEpisode}>{'Next >'}</NextButton>\r\n        </NextEpisodeDiv>\r\n      </EpisodePrevNextDiv>\r\n      <EpisodeComment id=\"comment\">\r\n        <EpisodeCommentCountDiv>\r\n          <label>댓글 {episode && episode.Episode_Comments.length}개</label>\r\n        </EpisodeCommentCountDiv>\r\n\r\n        {episode &&\r\n          episode.Episode_Comments.map(comment => {\r\n            return <CommnetCard key={+comment.id} comment={comment} />;\r\n          })}\r\n      </EpisodeComment>\r\n    </EpisodeDiv>\r\n  );\r\n};\r\n\r\nEpisode.getInitialProps = async context => {\r\n  const id = context.query.id;\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_EPISODE_REQUEST,\r\n    id,\r\n  });\r\n};\r\n\r\nexport default Episode;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAMA;AAAA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAPA;AACA;AAQA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAMA;AAEA;AAIA;AAAA;AAYA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAOA;AAAA;AAEA;AAAA;AAMA;AAAA;AAEA;AAAA;AA0BA;AAAA;AAAA;AADA;AAKA;AAAA;AAWA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}