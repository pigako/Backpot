{"version":3,"file":"static/webpack/static\\development\\pages\\book.js.43c0df42cd637d45bb61.hot-update.js","sources":["webpack:///./pages/book.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\nimport Link from 'next/link';\r\nimport { useSelector } from 'react-redux';\r\nimport Router from 'next/router';\r\n\r\nimport { LOAD_BOOK_REQUEST } from '../reducers/book';\r\nimport BookTable from '../components/BookTable';\r\nimport Button from '../components/designs/Button';\r\n\r\nconst SBookDiv = styled.div`\r\n  width: 98%;\r\n  margin: 30px 0px 0px 10px;\r\n`;\r\n\r\nconst BookTopDiv = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  height: 16rem;\r\n\r\n  border-bottom: solid 2px #495057;\r\n`;\r\nconst BookTopLeftDiv = styled.div`\r\n  width: 15%;\r\n  float: left;\r\n`;\r\nconst BookTopRightDiv = styled.div`\r\n  width: 80%;\r\n  padding: 1.5rem;\r\n  float: right;\r\n\r\n  border: solid 2px #495057;\r\n\r\n  & > label {\r\n    font-size: 1rem;\r\n    display: block;\r\n    margin-top: 1rem;\r\n\r\n    & > a {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  & > div {\r\n    display: flex;\r\n\r\n    & > label {\r\n      font-size: 1rem;\r\n      display: block;\r\n      margin-top: 1rem;\r\n      flex: 1;\r\n    }\r\n  }\r\n`;\r\nconst Thumbnail = styled.img`\r\n  height: 13rem;\r\n  display: block;\r\n  margin: 1rem auto;\r\n`;\r\nconst BookTitle = styled.h1`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst BookSummaryDiv = styled.div`\r\n  margin-top: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  padding-left: 1.5rem;\r\n  padding-right: 1.5rem;\r\n  height: 7rem;\r\n  width: 100%;\r\n  border-bottom: solid 2px #495057;\r\n`;\r\n\r\nconst BookButtonDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  height: 2.25rem;\r\n\r\n  & > button {\r\n    width: 8rem;\r\n  }\r\n`;\r\n\r\nconst Book = () => {\r\n  const { book } = useSelector(state => state.book);\r\n  const { me } = useSelector(state => state.user);\r\n\r\n  const onGoWriter = useCallback(\r\n    e => {\r\n      Router.push(\r\n        { pathname: '/librery', query: { id: book.User.userId } },\r\n        `/librery/${book.User.userId}`,\r\n      );\r\n    },\r\n    [book && book.User.id],\r\n  );\r\n\r\n  const onAddLikeBook = useCallback(e => {}, []);\r\n  const onRemoveLikeBook = useCallback(e => {}, []);\r\n\r\n  return (\r\n    <SBookDiv>\r\n      <BookTopDiv>\r\n        <BookTopLeftDiv>\r\n          <Thumbnail src={`http://localhost:5000/${book && book.thumbnail}`} />\r\n        </BookTopLeftDiv>\r\n        <BookTopRightDiv>\r\n          <BookTitle>{book && book.name}</BookTitle>\r\n          <label>{book && book.BookGenre[0].name}</label>\r\n          <label>\r\n            작가 <a onClick={onGoWriter}>{book && book.User.nickname}</a> 님\r\n          </label>\r\n          <div>\r\n            <label>\r\n              작품등록일{' '}\r\n              {book && moment(book.createdAt).format('YY.MM.DD HH시 mm분')}\r\n            </label>\r\n            <label>\r\n              최근등록일{' '}\r\n              {book &&\r\n                (book.Episodes[book.Episodes.length - 1]\r\n                  ? moment(\r\n                      book.Episodes[book.Episodes.length - 1].createdAt,\r\n                    ).format('YY.MM.DD HH시 mm분')\r\n                  : moment(book.createdAt).format('YY.MM.DD HH시 mm분'))}\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>연재수 {book && book.Episodes.length} 화</label>\r\n            <label>\r\n              조회수{' '}\r\n              {book && book.Episodes.reduce((acc, val) => acc + val.views, 0)}\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              추천수{' '}\r\n              {book &&\r\n                book.Episodes.reduce((acc, val) => acc + val.recommends, 0)}\r\n            </label>\r\n            <label>선호작수 {book && book.likersCount}</label>\r\n          </div>\r\n        </BookTopRightDiv>\r\n      </BookTopDiv>\r\n      <BookSummaryDiv\r\n        dangerouslySetInnerHTML={{ __html: book && book.summary }}\r\n      />\r\n      <BookButtonDiv>\r\n        {(me && me.id) === (book && book.User.id) ? (\r\n          <Button>글쓰러가기</Button>\r\n        ) : null}\r\n        {me && me.LikingBook.find(v => v.id === book && book.id) ? (\r\n          <Button color=\"pink\" onClick={onAddLikeBook}>\r\n            선호작추가\r\n          </Button>\r\n        ) : (\r\n          <Button color=\"pink\" onClick={onRemoveLikeBook}>\r\n            선호작해제\r\n          </Button>\r\n        )}\r\n      </BookButtonDiv>\r\n      {book && <BookTable episode={book.Episodes} />}\r\n    </SBookDiv>\r\n  );\r\n};\r\n\r\nBook.getInitialProps = async context => {\r\n  const bookId = context.query.bookid;\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_BOOK_REQUEST,\r\n    id: bookId,\r\n  });\r\n};\r\n\r\nexport default Book;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAEA;AAAA;AAFA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAEA;AAIA;AAAA;AAMA;AAAA;AAqBA;AAAA;AAOA;AAAA;AAOA;AAAA;AAAA;AADA;AAOA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}