{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user'; // 회원가입\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(function (signUpData) {\n            return axios.post('/user/signup', {\n              signUpData: signUpData\n            });\n          }, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // function* watchSignUp() {\n//   yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\n//     try {\n//       const result = yield call(signUpData => {\n//         return axios.post('/user/signup', { signUpData });\n//       }, action.data);\n//       yield put({\n//         type: SIGN_UP_SUCCESS,\n//         data: result,\n//       });\n//     } catch (e) {\n//       console.log(e);\n//       yield put({\n//         type: SIGN_UP_FAILURE,\n//         error: e,\n//       });\n//     }\n//   });\n// }\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/user.js"],"names":["signUp","watchSignUp","userSaga","all","fork","takeEvery","takeLatest","call","put","axios","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","action","signUpData","post","data","result","type","console","log","error"],"mappings":";;;;yBAgBUA,M;;;yBAkBAC,W;;;yBAuBeC,Q;;AAzDzB,SACEC,GADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,IALF,EAMEC,GANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,eAHF,QAIO,kBAJP,C,CAMA;;AACA,SAAUZ,MAAV,CAAiBa,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMN,IAAI,CAAC,UAAAO,UAAU,EAAI;AACtC,mBAAOL,KAAK,CAACM,IAAN,CAAW,cAAX,EAA2B;AAAED,cAAAA,UAAU,EAAVA;AAAF,aAA3B,CAAP;AACD,WAFwB,EAEtBD,MAAM,CAACG,IAFe,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAKI,iBAAMT,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEN,eADE;AAERI,YAAAA,IAAI,EAAEC;AAFE,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUIE,UAAAA,OAAO,CAACC,GAAR;AAVJ;AAWI,iBAAMZ,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEP,eADE;AAERU,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACI,eAAD,EAAkBV,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,WAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n  call,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// 회원가입\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpData => {\r\n      return axios.post('/user/signup', { signUpData });\r\n    }, action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n// function* watchSignUp() {\r\n//   yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\r\n//     try {\r\n//       const result = yield call(signUpData => {\r\n//         return axios.post('/user/signup', { signUpData });\r\n//       }, action.data);\r\n//       yield put({\r\n//         type: SIGN_UP_SUCCESS,\r\n//         data: result,\r\n//       });\r\n//     } catch (e) {\r\n//       console.log(e);\r\n//       yield put({\r\n//         type: SIGN_UP_FAILURE,\r\n//         error: e,\r\n//       });\r\n//     }\r\n//   });\r\n// }\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}