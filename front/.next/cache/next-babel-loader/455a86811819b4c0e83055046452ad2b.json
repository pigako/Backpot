{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { Container } from 'next/app';\nimport Layout from '../components/Layout';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar Backpot = function Backpot(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return __jsx(Container, null, __jsx(Provider, {\n    store: store\n  }, __jsx(Layout, null, __jsx(Component, pageProps))));\n};\n\nBackpot.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired,\n  pageProps: PropTypes.object.isRequired\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        // saga Loging\n        console.log(action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(witeReduxSaga(Backpot));","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/_app.js"],"names":["React","PropTypes","applyMiddleware","compose","createStore","Provider","createSagaMiddleware","withRedux","withReduxSaga","Container","Layout","reducer","rootSaga","Backpot","Component","store","pageProps","propTypes","elementType","isRequired","object","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","console","log","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run","witeReduxSaga"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAqC;AAAA,MAAlCC,SAAkC,QAAlCA,SAAkC;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AACnD,SACE,MAAC,SAAD,QACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KACE,MAAC,MAAD,QACE,MAAC,SAAD,EAAeC,SAAf,CADF,CADF,CADF,CADF;AASD,CAVD;;AAYAH,OAAO,CAACI,SAAR,GAAoB;AAClBH,EAAAA,SAAS,EAAEb,SAAS,CAACiB,WAAV,CAAsBC,UADf;AAElBJ,EAAAA,KAAK,EAAEd,SAAS,CAACmB,MAAV,CAAiBD,UAFN;AAGlBH,EAAAA,SAAS,EAAEf,SAAS,CAACmB,MAAV,CAAiBD;AAHV,CAApB;;AAMA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAChD,MAAMC,cAAc,GAAGlB,oBAAoB,EAA3C;AACA,MAAMmB,WAAW,GAAG,CAClBD,cADkB,EAElB,UAAAT,KAAK;AAAA,WAAI,UAAAW,IAAI;AAAA,aAAI,UAAAC,MAAM,EAAI;AACzB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAD,QAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,OAJY;AAAA,KAAR;AAAA,GAFa,CAApB;AAQA,MAAMG,QAAQ,GACZ,QACI3B,OAAO,CAACD,eAAe,MAAf,SAAmBuB,WAAnB,CAAD,CADX,GAEItB,OAAO,CACLD,eAAe,MAAf,SAAmBuB,WAAnB,CADK,EAEL,CAACF,OAAO,CAACQ,QAAT,IACE,OAAOC,MAAM,CAACC,4BAAd,KAA+C,WADjD,GAEID,MAAM,CAACC,4BAAP,EAFJ,GAGI,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GALA,CAHb;AAUA,MAAMnB,KAAK,GAAGX,WAAW,CAACO,OAAD,EAAUW,YAAV,EAAwBQ,QAAxB,CAAzB;AACAf,EAAAA,KAAK,CAACoB,QAAN,GAAiBX,cAAc,CAACY,GAAf,CAAmBxB,QAAnB,CAAjB;AACA,SAAOG,KAAP;AACD,CAvBD;;AAyBA,eAAeR,SAAS,CAACc,cAAD,CAAT,CAA0BgB,aAAa,CAACxB,OAAD,CAAvC,CAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport { Container } from 'next/app';\r\n\r\nimport Layout from '../components/Layout';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst Backpot = ({ Component, store, pageProps }) => {\r\n  return (\r\n    <Container>\r\n      <Provider store={store}>\r\n        <Layout>\r\n          <Component {...pageProps} />\r\n        </Layout>\r\n      </Provider>\r\n    </Container>\r\n  );\r\n};\r\n\r\nBackpot.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  store: PropTypes.object.isRequired,\r\n  pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [\r\n    sagaMiddleware,\r\n    store => next => action => {\r\n      // saga Loging\r\n      console.log(action);\r\n      next(action);\r\n    },\r\n  ];\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : compose(\r\n          applyMiddleware(...middlewares),\r\n          !options.isServer &&\r\n            typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined'\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n            : f => f,\r\n        );\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(witeReduxSaga(Backpot));\r\n"]},"metadata":{},"sourceType":"module"}