{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadBords),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadBoard),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddBoard),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUpdateBoard),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeleteBoard),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUpdateComment),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeleteComment),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bookSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, LOAD_BOARD_REQUEST, LOAD_BOARD_SUCCESS, LOAD_BOARD_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_SUCCESS, ADD_BOARD_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_BOARD_REQUEST, DELETE_BOARD_FAILURE, DELETE_BOARD_SUCCESS, UPDATE_BOARD_REQUEST, UPDATE_BOARD_SUCCESS, UPDATE_BOARD_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, UPDATE_COMMENT_REQUEST, UPDATE_COMMENT_FAILURE, UPDATE_COMMENT_SUCCESS } from '../reducers/board'; // 전체 게시글 가져오기\n\nfunction watchLoadBords() {\n  return _regeneratorRuntime.wrap(function watchLoadBords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(1000, LOAD_BOARDS_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function loadBoards(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadBoards$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function () {\n                      var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n                      return axios.get(\"/boards?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n                    }, action.lastId);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_BOARDS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_BOARDS_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, loadBoards, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n} // 게시글 가져오기\n\n\nfunction watchLoadBoard() {\n  return _regeneratorRuntime.wrap(function watchLoadBoard$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_BOARD_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function loadBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadBoard$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(function (boardId) {\n                      return axios.get(\"/board/\".concat(boardId));\n                    }, action.boardId);\n\n                  case 3:\n                    result = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: LOAD_BOARD_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context3.next = 12;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.log(_context3.t0);\n                    put({\n                      type: LOAD_BOARD_FAILURE,\n                      error: _context3.t0\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, loadBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n} // 게시글 추가하기\n\n\nfunction watchAddBoard() {\n  return _regeneratorRuntime.wrap(function watchAddBoard$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_BOARD_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function addBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function addBoard$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(function (boardData) {\n                      return axios.post(\"/board\", boardData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context5.sent;\n                    _context5.next = 6;\n                    return put({\n                      type: ADD_BOARD_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context5.next = 13;\n                    break;\n\n                  case 8:\n                    _context5.prev = 8;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    console.log(_context5.t0);\n                    _context5.next = 13;\n                    return put({\n                      type: ADD_BOARD_FAILURE,\n                      error: _context5.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, addBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n} // 게시글 수정\n\n\nfunction watchUpdateBoard() {\n  return _regeneratorRuntime.wrap(function watchUpdateBoard$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UPDATE_BOARD_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function updateBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function updateBoard$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(function (updateBoardData) {\n                      return axios.patch(\"/board\", updateBoardData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context7.sent;\n                    _context7.next = 6;\n                    return put({\n                      type: UPDATE_BOARD_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context7.next = 13;\n                    break;\n\n                  case 8:\n                    _context7.prev = 8;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    console.log(_context7.t0);\n                    _context7.next = 13;\n                    return put({\n                      type: UPDATE_BOARD_FAILURE,\n                      error: _context7.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, updateBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n} // 게시글 삭제\n\n\nfunction watchDeleteBoard() {\n  return _regeneratorRuntime.wrap(function watchDeleteBoard$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(DELETE_BOARD_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function deleteBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function deleteBoard$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(function (boardId) {\n                      return axios[\"delete\"](\"/board/\".concat(boardId), {\n                        withCredentials: true\n                      });\n                    }, action.boardId);\n\n                  case 3:\n                    result = _context9.sent;\n                    _context9.next = 6;\n                    return put({\n                      type: DELETE_BOARD_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context9.next = 13;\n                    break;\n\n                  case 8:\n                    _context9.prev = 8;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    console.log(_context9.t0);\n                    _context9.next = 13;\n                    return put({\n                      type: DELETE_BOARD_FAILURE,\n                      error: _context9.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, deleteBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n} // 댓글 추가\n\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function addComment(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function addComment$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.prev = 0;\n                    _context11.next = 3;\n                    return call(function (boardData) {\n                      return axios.post(\"/board/comment\", boardData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context11.sent;\n                    _context11.next = 6;\n                    return put({\n                      type: ADD_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context11.next = 13;\n                    break;\n\n                  case 8:\n                    _context11.prev = 8;\n                    _context11.t0 = _context11[\"catch\"](0);\n                    console.log(_context11.t0);\n                    _context11.next = 13;\n                    return put({\n                      type: ADD_COMMENT_FAILURE,\n                      error: _context11.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, addComment, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked6);\n} // 댓글 수정\n\n\nfunction watchUpdateComment() {\n  return _regeneratorRuntime.wrap(function watchUpdateComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPDATE_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function updateComment(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function updateComment$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.prev = 0;\n                    _context13.next = 3;\n                    return call(function (updateCommentData) {\n                      return axios.patch(\"/board/comment\", updateCommentData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context13.sent;\n                    _context13.next = 6;\n                    return put({\n                      type: UPDATE_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context13.next = 13;\n                    break;\n\n                  case 8:\n                    _context13.prev = 8;\n                    _context13.t0 = _context13[\"catch\"](0);\n                    console.log(_context13.t0);\n                    _context13.next = 13;\n                    return put({\n                      type: UPDATE_COMMENT_FAILURE,\n                      error: _context13.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, updateComment, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked7);\n} // 댓글 삭제\n\n\nfunction watchDeleteComment() {\n  return _regeneratorRuntime.wrap(function watchDeleteComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(DELETE_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function deleteBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function deleteBoard$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.prev = 0;\n                    _context15.next = 3;\n                    return call(function (commentId) {\n                      return axios[\"delete\"](\"/board/comment/\".concat(commentId), {\n                        withCredentials: true\n                      });\n                    }, action.commentId);\n\n                  case 3:\n                    result = _context15.sent;\n                    _context15.next = 6;\n                    return put({\n                      type: DELETE_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context15.next = 13;\n                    break;\n\n                  case 8:\n                    _context15.prev = 8;\n                    _context15.t0 = _context15[\"catch\"](0);\n                    console.log(_context15.t0);\n                    _context15.next = 13;\n                    return put({\n                      type: DELETE_COMMENT_FAILURE,\n                      error: _context15.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, deleteBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function bookSaga() {\n  return _regeneratorRuntime.wrap(function bookSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchLoadBords), fork(watchLoadBoard), fork(watchAddBoard), fork(watchUpdateBoard), fork(watchDeleteBoard), fork(watchAddComment), fork(watchUpdateComment), fork(watchDeleteComment)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["watchLoadBords","watchLoadBoard","watchAddBoard","watchUpdateBoard","watchDeleteBoard","watchAddComment","watchUpdateComment","watchDeleteComment","bookSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","LOAD_BOARD_REQUEST","LOAD_BOARD_SUCCESS","LOAD_BOARD_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_SUCCESS","ADD_BOARD_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","DELETE_BOARD_REQUEST","DELETE_BOARD_FAILURE","DELETE_BOARD_SUCCESS","UPDATE_BOARD_REQUEST","UPDATE_BOARD_SUCCESS","UPDATE_BOARD_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_FAILURE","UPDATE_COMMENT_SUCCESS","loadBoards","action","lastId","limit","get","result","type","data","console","log","error","loadBoard","boardId","addBoard","boardData","post","withCredentials","updateBoard","updateBoardData","patch","deleteBoard","addComment","updateComment","updateCommentData","commentId"],"mappings":"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","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  LOAD_BOARD_REQUEST,\r\n  LOAD_BOARD_SUCCESS,\r\n  LOAD_BOARD_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n  ADD_BOARD_FAILURE,\r\n  DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n  DELETE_BOARD_REQUEST,\r\n  DELETE_BOARD_FAILURE,\r\n  DELETE_BOARD_SUCCESS,\r\n  UPDATE_BOARD_REQUEST,\r\n  UPDATE_BOARD_SUCCESS,\r\n  UPDATE_BOARD_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_SUCCESS,\r\n  UPDATE_COMMENT_REQUEST,\r\n  UPDATE_COMMENT_FAILURE,\r\n  UPDATE_COMMENT_SUCCESS,\r\n} from '../reducers/board';\r\n\r\n// 전체 게시글 가져오기\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 가져오기\r\nfunction* watchLoadBoard() {\r\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.get(`/board/${boardId}`);\r\n      }, action.boardId);\r\n      yield put({\r\n        type: LOAD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      put({\r\n        type: LOAD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 추가하기\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 수정\r\nfunction* watchUpdateBoard() {\r\n  yield takeLatest(UPDATE_BOARD_REQUEST, function* updateBoard(action) {\r\n    try {\r\n      const result = yield call(updateBoardData => {\r\n        return axios.patch(`/board`, updateBoardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 삭제\r\nfunction* watchDeleteBoard() {\r\n  yield takeLatest(DELETE_BOARD_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.delete(`/board/${boardId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.boardId);\r\n      yield put({\r\n        type: DELETE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 추가\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, function* addComment(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board/comment`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 수정\r\nfunction* watchUpdateComment() {\r\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\r\n    try {\r\n      const result = yield call(updateCommentData => {\r\n        return axios.patch(`/board/comment`, updateCommentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 삭제\r\nfunction* watchDeleteComment() {\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(commentId => {\r\n        return axios.delete(`/board/comment/${commentId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.commentId);\r\n      yield put({\r\n        type: DELETE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([\r\n    fork(watchLoadBords),\r\n    fork(watchLoadBoard),\r\n    fork(watchAddBoard),\r\n    fork(watchUpdateBoard),\r\n    fork(watchDeleteBoard),\r\n    fork(watchAddComment),\r\n    fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}