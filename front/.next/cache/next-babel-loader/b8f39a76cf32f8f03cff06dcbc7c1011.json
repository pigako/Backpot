{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_FAILURE } from '../reducers/board';\n\nfunction* watchLoadBords() {\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\n    try {\n      const result = yield call((lastId = 0, limit = 30) => {\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOARDS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOARDS_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nfunction* watchAddBoard() {\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\n    try {\n      const result = yield call(boardData => {\n        return axios.post(`/board`, boardData, {\n          withCredentials: true\n        });\n      }, aciton.data);\n      yield put({\n        type: ADD_BOARD_REQUEST,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBords), fork(watchAddBoard)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_FAILURE","watchLoadBords","loadBoards","action","result","lastId","limit","get","type","data","e","console","log","error","watchAddBoard","addBoard","boardData","post","withCredentials","aciton","bookSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,iBALF,QAMO,mBANP;;AAQA,UAAUC,cAAV,GAA2B;AACzB,QAAMT,QAAQ,CAAC,IAAD,EAAOI,mBAAP,EAA4B,UAAUM,UAAV,CAAqBC,MAArB,EAA6B;AACrE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMd,IAAI,CAAC,CAACe,MAAM,GAAG,CAAV,EAAaC,KAAK,GAAG,EAArB,KAA4B;AACpD,eAAOX,KAAK,CAACY,GAAN,CAAW,kBAAiBF,MAAO,UAASC,KAAM,EAAlD,CAAP;AACD,OAFwB,EAEtBH,MAAM,CAACE,MAFe,CAAzB;AAGA,YAAMX,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEX,mBADE;AAERY,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMhB,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEV,mBADE;AAERe,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAhBa,CAAd;AAiBD;;AAED,UAAUI,aAAV,GAA0B;AACxB,QAAMrB,UAAU,CAACM,iBAAD,EAAoB,UAAUgB,QAAV,CAAmBZ,MAAnB,EAA2B;AAC7D,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMd,IAAI,CAAC0B,SAAS,IAAI;AACrC,eAAOrB,KAAK,CAACsB,IAAN,CAAY,QAAZ,EAAqBD,SAArB,EAAgC;AACrCE,UAAAA,eAAe,EAAE;AADoB,SAAhC,CAAP;AAGD,OAJwB,EAItBC,MAAM,CAACV,IAJe,CAAzB;AAKA,YAAMf,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAET,iBADE;AAERU,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMhB,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAER,iBADE;AAERa,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAM/B,GAAG,CAAC,CAACE,IAAI,CAACU,cAAD,CAAL,EAAuBV,IAAI,CAACuB,aAAD,CAA3B,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_FAILURE,\r\n} from '../reducers/board';\r\n\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, aciton.data);\r\n      yield put({\r\n        type: ADD_BOARD_REQUEST,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBords), fork(watchAddBoard)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}