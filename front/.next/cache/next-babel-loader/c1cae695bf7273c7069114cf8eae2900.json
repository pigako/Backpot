{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE, ADD_EPISODE_REQUEST, ADD_EPISODE_SUCCESS, ADD_EPISODE_FAILURE } from '../reducers/episode'; // 글 조회\n\nfunction* watchLoadEpisode() {\n  yield takeLatest(LOAD_EPISODE_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeId => {\n        return axios.get(`/episode/${episodeId}`);\n      }, action.id);\n      yield put({\n        type: LOAD_EPISODE_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 글 작성\n\n\nfunction* watchAddEpisode() {\n  yield takeLatest(ADD_EPISODE_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeData => {\n        return axios.post(`/episode`, episodeData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_EPISODE_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* episodeSaga() {\n  yield all([fork(watchLoadEpisode), fork(watchAddEpisode)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","ADD_EPISODE_REQUEST","ADD_EPISODE_SUCCESS","ADD_EPISODE_FAILURE","watchLoadEpisode","action","result","episodeId","get","id","type","data","e","console","log","error","watchAddEpisode","episodeData","post","withCredentials","episodeSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,qBAPP,C,CASA;;AACA,UAAUC,gBAAV,GAA6B;AAC3B,QAAMT,UAAU,CAACG,oBAAD,EAAuB,WAAUO,MAAV,EAAkB;AACvD,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMd,IAAI,CAACe,SAAS,IAAI;AACrC,eAAOV,KAAK,CAACW,GAAN,CAAW,YAAWD,SAAU,EAAhC,CAAP;AACD,OAFwB,EAEtBF,MAAM,CAACI,EAFe,CAAzB;AAGA,YAAMb,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEX,oBADE;AAERY,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMhB,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEV,oBADE;AAERe,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAhBe,CAAhB;AAiBD,C,CACD;;;AACA,UAAUI,eAAV,GAA4B;AAC1B,QAAMrB,UAAU,CAACM,mBAAD,EAAsB,WAAUI,MAAV,EAAkB;AACtD,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMd,IAAI,CAACyB,WAAW,IAAI;AACvC,eAAOpB,KAAK,CAACqB,IAAN,CAAY,UAAZ,EAAuBD,WAAvB,EAAoC;AACzCE,UAAAA,eAAe,EAAE;AADwB,SAApC,CAAP;AAGD,OAJwB,EAItBd,MAAM,CAACM,IAJe,CAAzB;AAKA,YAAMf,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAER,mBADE;AAERS,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMhB,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEP,mBADE;AAERY,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD;;AAED,eAAe,UAAUQ,WAAV,GAAwB;AACrC,QAAM7B,GAAG,CAAC,CAACE,IAAI,CAACW,gBAAD,CAAL,EAAyBX,IAAI,CAACuB,eAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n  ADD_EPISODE_REQUEST,\r\n  ADD_EPISODE_SUCCESS,\r\n  ADD_EPISODE_FAILURE,\r\n} from '../reducers/episode';\r\n\r\n// 글 조회\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 글 작성\r\nfunction* watchAddEpisode() {\r\n  yield takeLatest(ADD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeData => {\r\n        return axios.post(`/episode`, episodeData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([fork(watchLoadEpisode), fork(watchAddEpisode)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}