{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadEpisode),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddEpisode),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddRecommend),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUpdateEpisode),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeleteEpisode),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUpdateComment),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeleteComment),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(episodeSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE, ADD_EPISODE_REQUEST, ADD_EPISODE_SUCCESS, ADD_EPISODE_FAILURE, ADD_RECOMMEND_REQUEST, ADD_RECOMMEND_SUCCESS, ADD_RECOMMEND_FAILURE, UPDATE_EPISODE_REQUEST, UPDATE_EPISODE_SUCCESS, UPDATE_EPISODE_FAILURE, DELETE_EPISODE_REQUEST, DELETE_EPISODE_SUCCESS, DELETE_EPISODE_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, UPDATE_COMMENT_REQUEST, UPDATE_COMMENT_SUCCESS, UPDATE_COMMENT_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE } from '../reducers/episode'; // 글 조회\n\nfunction watchLoadEpisode() {\n  return _regeneratorRuntime.wrap(function watchLoadEpisode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function (episodeId) {\n                      return axios.get(\"/episode/\".concat(episodeId));\n                    }, action.id);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_EPISODE_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n} // 글 작성\n\n\nfunction watchAddEpisode() {\n  return _regeneratorRuntime.wrap(function watchAddEpisode$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee2(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(function (episodeData) {\n                      return axios.post(\"/episode\", episodeData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: ADD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.log(_context3.t0);\n                    _context3.next = 13;\n                    return put({\n                      type: ADD_EPISODE_FAILURE,\n                      error: _context3.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n} // 추천\n\n\nfunction watchAddRecommend() {\n  return _regeneratorRuntime.wrap(function watchAddRecommend$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_RECOMMEND_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee3(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(function (episodeId) {\n                      return axios.post(\"/episode/\".concat(episodeId), {}, {\n                        withCredentials: true\n                      });\n                    }, action.id);\n\n                  case 3:\n                    result = _context5.sent;\n                    _context5.next = 6;\n                    return put({\n                      type: ADD_RECOMMEND_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context5.next = 13;\n                    break;\n\n                  case 8:\n                    _context5.prev = 8;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    console.log(_context5.t0);\n                    _context5.next = 13;\n                    return put({\n                      type: ADD_RECOMMEND_FAILURE,\n                      error: _context5.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n} // 수정\n\n\nfunction watchUpdateEpisode() {\n  return _regeneratorRuntime.wrap(function watchUpdateEpisode$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UPDATE_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4(action) {\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(function (updateData) {\n                      return axios.patch(\"/episode/\".concat(updateData.id), updateData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    _context7.next = 5;\n                    return put({\n                      type: UPDATE_EPISODE_SUCCESS\n                    });\n\n                  case 5:\n                    _context7.next = 12;\n                    break;\n\n                  case 7:\n                    _context7.prev = 7;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    console.log(_context7.t0);\n                    _context7.next = 12;\n                    return put({\n                      type: UPDATE_EPISODE_FAILURE,\n                      error: _context7.t0\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 7]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n} // 삭제\n\n\nfunction watchDeleteEpisode() {\n  return _regeneratorRuntime.wrap(function watchDeleteEpisode$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(DELETE_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee5(action) {\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(function (episodeId) {\n                      return axios[\"delete\"](\"/episode/\".concat(episodeId), {\n                        withCredentials: true\n                      });\n                    }, action.id);\n\n                  case 3:\n                    _context9.next = 5;\n                    return put({\n                      type: DELETE_EPISODE_SUCCESS\n                    });\n\n                  case 5:\n                    _context9.next = 12;\n                    break;\n\n                  case 7:\n                    _context9.prev = 7;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    console.log(_context9.t0);\n                    _context9.next = 12;\n                    return put({\n                      type: DELETE_EPISODE_FAILURE,\n                      error: _context9.t0\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 7]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n} // 댓글 작성\n\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee6(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee6$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.prev = 0;\n                    _context11.next = 3;\n                    return call(function (commentData) {\n                      return axios.post(\"/episode/comment\", commentData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context11.sent;\n                    _context11.next = 6;\n                    return put({\n                      type: ADD_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context11.next = 13;\n                    break;\n\n                  case 8:\n                    _context11.prev = 8;\n                    _context11.t0 = _context11[\"catch\"](0);\n                    console.log(_context11.t0);\n                    _context11.next = 13;\n                    return put({\n                      type: ADD_COMMENT_FAILURE,\n                      error: _context11.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee6, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked6);\n} // 댓글 수정\n\n\nfunction watchUpdateComment() {\n  return _regeneratorRuntime.wrap(function watchUpdateComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPDATE_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function updateComment(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function updateComment$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.prev = 0;\n                    _context13.next = 3;\n                    return call(function (updateCommentData) {\n                      return axios.patch(\"/episode/comment\", updateCommentData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context13.sent;\n                    _context13.next = 6;\n                    return put({\n                      type: UPDATE_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context13.next = 13;\n                    break;\n\n                  case 8:\n                    _context13.prev = 8;\n                    _context13.t0 = _context13[\"catch\"](0);\n                    console.log(_context13.t0);\n                    _context13.next = 13;\n                    return put({\n                      type: UPDATE_COMMENT_FAILURE,\n                      error: _context13.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, updateComment, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked7);\n} // 댓글 삭제\n\n\nfunction watchDeleteComment() {\n  return _regeneratorRuntime.wrap(function watchDeleteComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(DELETE_COMMENT_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function deleteBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function deleteBoard$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.prev = 0;\n                    _context15.next = 3;\n                    return call(function (commentId) {\n                      return axios[\"delete\"](\"/episode/comment/\".concat(commentId), {\n                        withCredentials: true\n                      });\n                    }, action.commentId);\n\n                  case 3:\n                    result = _context15.sent;\n                    _context15.next = 6;\n                    return put({\n                      type: DELETE_COMMENT_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context15.next = 13;\n                    break;\n\n                  case 8:\n                    _context15.prev = 8;\n                    _context15.t0 = _context15[\"catch\"](0);\n                    console.log(_context15.t0);\n                    _context15.next = 13;\n                    return put({\n                      type: DELETE_COMMENT_FAILURE,\n                      error: _context15.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, deleteBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function episodeSaga() {\n  return _regeneratorRuntime.wrap(function episodeSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchLoadEpisode), fork(watchAddEpisode), fork(watchAddRecommend), fork(watchUpdateEpisode), fork(watchDeleteEpisode), fork(watchAddComment), fork(watchUpdateComment), fork(watchDeleteComment)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["watchLoadEpisode","watchAddEpisode","watchAddRecommend","watchUpdateEpisode","watchDeleteEpisode","watchAddComment","watchUpdateComment","watchDeleteComment","episodeSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","ADD_EPISODE_REQUEST","ADD_EPISODE_SUCCESS","ADD_EPISODE_FAILURE","ADD_RECOMMEND_REQUEST","ADD_RECOMMEND_SUCCESS","ADD_RECOMMEND_FAILURE","UPDATE_EPISODE_REQUEST","UPDATE_EPISODE_SUCCESS","UPDATE_EPISODE_FAILURE","DELETE_EPISODE_REQUEST","DELETE_EPISODE_SUCCESS","DELETE_EPISODE_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","action","episodeId","get","id","result","type","data","console","log","error","episodeData","post","withCredentials","updateData","patch","commentData","updateComment","updateCommentData","deleteBoard","commentId"],"mappings":";;;;yBA8BUA,gB;;;yBAoBAC,e;;;yBAsBAC,iB;;;yBA0BAC,kB;;;yBAqBAC,kB;;;yBAqBAC,e;;;yBAsBAC,kB;;;yBAsBAC,kB;;;yBAsBeC,W;;AA9MzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,qBAPF,EAQEC,qBARF,EASEC,qBATF,EAUEC,sBAVF,EAWEC,sBAXF,EAYEC,sBAZF,EAaEC,sBAbF,EAcEC,sBAdF,EAeEC,sBAfF,EAgBEC,mBAhBF,EAiBEC,mBAjBF,EAkBEC,mBAlBF,EAmBEC,sBAnBF,EAoBEC,sBApBF,EAqBEC,sBArBF,EAsBEC,sBAtBF,EAuBEC,sBAvBF,EAwBEC,sBAxBF,QAyBO,qBAzBP,C,CA2BA;;AACA,SAAUvC,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMa,UAAU,CAACG,oBAAD;AAAA;AAAA,mCAAuB,iBAAUwB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,2BAAM9B,IAAI,CAAC,UAAA+B,SAAS,EAAI;AACrC,6BAAO1B,KAAK,CAAC2B,GAAN,oBAAsBD,SAAtB,EAAP;AACD,qBAFwB,EAEtBD,MAAM,CAACG,EAFe,CAAV;;AAFoB;AAE7BC,oBAAAA,MAF6B;AAAA;AAKnC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAE5B,oBADE;AAER6B,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AALmC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnCC,oBAAAA,OAAO,CAACC,GAAR;AAVmC;AAWnC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAE3B,oBADE;AAER+B,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAXmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAmBA;;;AACA,SAAUhD,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMY,UAAU,CAACM,mBAAD;AAAA;AAAA,mCAAsB,kBAAUqB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnB,2BAAM9B,IAAI,CAAC,UAAAwC,WAAW,EAAI;AACvC,6BAAOnC,KAAK,CAACoC,IAAN,aAAuBD,WAAvB,EAAoC;AACzCE,wBAAAA,eAAe,EAAE;AADwB,uBAApC,CAAP;AAGD,qBAJwB,EAItBZ,MAAM,CAACM,IAJe,CAAV;;AAFmB;AAE5BF,oBAAAA,MAF4B;AAAA;AAOlC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEzB,mBADE;AAER0B,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAPkC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYlCC,oBAAAA,OAAO,CAACC,GAAR;AAZkC;AAalC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAExB,mBADE;AAER4B,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqBA;;;AACA,SAAU/C,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMW,UAAU,CAACS,qBAAD;AAAA;AAAA,mCAAwB,kBAAUkB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErB,2BAAM9B,IAAI,CAAC,UAAA+B,SAAS,EAAI;AACrC,6BAAO1B,KAAK,CAACoC,IAAN,oBACOV,SADP,GAEL,EAFK,EAGL;AACEW,wBAAAA,eAAe,EAAE;AADnB,uBAHK,CAAP;AAOD,qBARwB,EAQtBZ,MAAM,CAACG,EARe,CAAV;;AAFqB;AAE9BC,oBAAAA,MAF8B;AAAA;AAWpC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEtB,qBADE;AAERuB,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAXoC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBpCC,oBAAAA,OAAO,CAACC,GAAR;AAhBoC;AAiBpC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAErB,qBADE;AAERyB,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAjBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAxB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAyBA;;;AACA,SAAU9C,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,UAAU,CAACY,sBAAD;AAAA;AAAA,mCAAyB,kBAAUe,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErC,2BAAM9B,IAAI,CAAC,UAAA2C,UAAU,EAAI;AACvB,6BAAOtC,KAAK,CAACuC,KAAN,oBAAwBD,UAAU,CAACV,EAAnC,GAAyCU,UAAzC,EAAqD;AAC1DD,wBAAAA,eAAe,EAAE;AADyC,uBAArD,CAAP;AAGD,qBAJS,EAIPZ,MAAM,CAACM,IAJA,CAAV;;AAFqC;AAAA;AAOrC,2BAAMhC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEnB;AADE,qBAAD,CAAT;;AAPqC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWrCqB,oBAAAA,OAAO,CAACC,GAAR;AAXqC;AAYrC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAElB,sBADE;AAERsB,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAZqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAzB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAoBA;;;AACA,SAAU7C,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACe,sBAAD;AAAA;AAAA,mCAAyB,kBAAUY,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErC,2BAAM9B,IAAI,CAAC,UAAA+B,SAAS,EAAI;AACtB,6BAAO1B,KAAK,UAAL,oBAAyB0B,SAAzB,GAAsC;AAC3CW,wBAAAA,eAAe,EAAE;AAD0B,uBAAtC,CAAP;AAGD,qBAJS,EAIPZ,MAAM,CAACG,EAJA,CAAV;;AAFqC;AAAA;AAOrC,2BAAM7B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEhB;AADE,qBAAD,CAAT;;AAPqC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWrCkB,oBAAAA,OAAO,CAACC,GAAR;AAXqC;AAYrC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEf,sBADE;AAERmB,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAZqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAzB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAoBA;;;AACA,SAAU5C,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACkB,mBAAD;AAAA;AAAA,mCAAsB,kBAAUS,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnB,2BAAM9B,IAAI,CAAC,UAAA6C,WAAW,EAAI;AACvC,6BAAOxC,KAAK,CAACoC,IAAN,qBAA+BI,WAA/B,EAA4C;AACjDH,wBAAAA,eAAe,EAAE;AADgC,uBAA5C,CAAP;AAGD,qBAJwB,EAItBZ,MAAM,CAACM,IAJe,CAAV;;AAFmB;AAE5BF,oBAAAA,MAF4B;AAAA;AAOlC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEb,mBADE;AAERc,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAPkC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYlCC,oBAAAA,OAAO,CAACC,GAAR;AAZkC;AAalC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEZ,mBADE;AAERgB,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqBA;;;AACA,SAAU3C,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACqB,sBAAD;AAAA;AAAA,mCAAyB,SAAUsB,aAAV,CAAwBhB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB,2BAAM9B,IAAI,CAAC,UAAA+C,iBAAiB,EAAI;AAC7C,6BAAO1C,KAAK,CAACuC,KAAN,qBAAgCG,iBAAhC,EAAmD;AACxDL,wBAAAA,eAAe,EAAE;AADuC,uBAAnD,CAAP;AAGD,qBAJwB,EAItBZ,MAAM,CAACM,IAJe,CAAV;;AAFsB;AAE/BF,oBAAAA,MAF+B;AAAA;AAOrC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEV,sBADE;AAERW,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAPqC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYrCC,oBAAAA,OAAO,CAACC,GAAR;AAZqC;AAarC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAET,sBADE;AAERa,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAbqC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUO,aAAV;AAAA,WAAzB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqBA;;;AACA,SAAUjD,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACwB,sBAAD;AAAA;AAAA,mCAAyB,SAAUqB,WAAV,CAAsBlB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB,2BAAM9B,IAAI,CAAC,UAAAiD,SAAS,EAAI;AACrC,6BAAO5C,KAAK,UAAL,4BAAiC4C,SAAjC,GAA8C;AACnDP,wBAAAA,eAAe,EAAE;AADkC,uBAA9C,CAAP;AAGD,qBAJwB,EAItBZ,MAAM,CAACmB,SAJe,CAAV;;AAFsB;AAE/Bf,oBAAAA,MAF+B;AAAA;AAOrC,2BAAM9B,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEP,sBADE;AAERQ,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAPqC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYrCC,oBAAAA,OAAO,CAACC,GAAR;AAZqC;AAarC,2BAAMlC,GAAG,CAAC;AACR+B,sBAAAA,IAAI,EAAEN,sBADE;AAERU,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAbqC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUS,WAAV;AAAA,WAAzB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,eAAe,SAAUlD,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACX,gBAAD,CADI,EAERW,IAAI,CAACV,eAAD,CAFI,EAGRU,IAAI,CAACT,iBAAD,CAHI,EAIRS,IAAI,CAACR,kBAAD,CAJI,EAKRQ,IAAI,CAACP,kBAAD,CALI,EAMRO,IAAI,CAACN,eAAD,CANI,EAORM,IAAI,CAACL,kBAAD,CAPI,EAQRK,IAAI,CAACJ,kBAAD,CARI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n  ADD_EPISODE_REQUEST,\r\n  ADD_EPISODE_SUCCESS,\r\n  ADD_EPISODE_FAILURE,\r\n  ADD_RECOMMEND_REQUEST,\r\n  ADD_RECOMMEND_SUCCESS,\r\n  ADD_RECOMMEND_FAILURE,\r\n  UPDATE_EPISODE_REQUEST,\r\n  UPDATE_EPISODE_SUCCESS,\r\n  UPDATE_EPISODE_FAILURE,\r\n  DELETE_EPISODE_REQUEST,\r\n  DELETE_EPISODE_SUCCESS,\r\n  DELETE_EPISODE_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  UPDATE_COMMENT_REQUEST,\r\n  UPDATE_COMMENT_SUCCESS,\r\n  UPDATE_COMMENT_FAILURE,\r\n  DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n} from '../reducers/episode';\r\n\r\n// 글 조회\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 글 작성\r\nfunction* watchAddEpisode() {\r\n  yield takeLatest(ADD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeData => {\r\n        return axios.post(`/episode`, episodeData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 추천\r\nfunction* watchAddRecommend() {\r\n  yield takeLatest(ADD_RECOMMEND_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.post(\r\n          `/episode/${episodeId}`,\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        );\r\n      }, action.id);\r\n      yield put({\r\n        type: ADD_RECOMMEND_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_RECOMMEND_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 수정\r\nfunction* watchUpdateEpisode() {\r\n  yield takeLatest(UPDATE_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      yield call(updateData => {\r\n        return axios.patch(`/episode/${updateData.id}`, updateData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_EPISODE_SUCCESS,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 삭제\r\nfunction* watchDeleteEpisode() {\r\n  yield takeLatest(DELETE_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      yield call(episodeId => {\r\n        return axios.delete(`/episode/${episodeId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.id);\r\n      yield put({\r\n        type: DELETE_EPISODE_SUCCESS,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 작성\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(commentData => {\r\n        return axios.post(`/episode/comment`, commentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 수정\r\nfunction* watchUpdateComment() {\r\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\r\n    try {\r\n      const result = yield call(updateCommentData => {\r\n        return axios.patch(`/episode/comment`, updateCommentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 삭제\r\nfunction* watchDeleteComment() {\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(commentId => {\r\n        return axios.delete(`/episode/comment/${commentId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.commentId);\r\n      yield put({\r\n        type: DELETE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([\r\n    fork(watchLoadEpisode),\r\n    fork(watchAddEpisode),\r\n    fork(watchAddRecommend),\r\n    fork(watchUpdateEpisode),\r\n    fork(watchDeleteEpisode),\r\n    fork(watchAddComment),\r\n    fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}