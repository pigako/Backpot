{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Router from 'next/router';\nimport { useSelector } from 'react-redux';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport Button from '../components/designs/Button';\nconst SProfileDiv = styled.div.withConfig({\n  displayName: \"profile__SProfileDiv\",\n  componentId: \"sc-1n71nmh-0\"\n})([\"width:98%;margin-top:10px;\"]);\nconst ProfileTitle = styled.h1.withConfig({\n  displayName: \"profile__ProfileTitle\",\n  componentId: \"sc-1n71nmh-1\"\n})([\"display:inline-block;font-weight:bold;margin-left:10px;width:100%;\"]);\nconst InfoCardWrap = styled.div.withConfig({\n  displayName: \"profile__InfoCardWrap\",\n  componentId: \"sc-1n71nmh-2\"\n})([\"margin-top:2rem;margin-left:1.5rem;border:solid 1px #495057;border-radius:6px;width:70%;\"]);\nconst InfoCardDiv = styled.div.withConfig({\n  displayName: \"profile__InfoCardDiv\",\n  componentId: \"sc-1n71nmh-3\"\n})([\"display:flex;align-items:center;margin:1rem;height:4rem;\"]);\nconst InfoLeftDiv = styled.div.withConfig({\n  displayName: \"profile__InfoLeftDiv\",\n  componentId: \"sc-1n71nmh-4\"\n})([\"flex:1;\"]);\nconst InfoRightDiv = styled.div.withConfig({\n  displayName: \"profile__InfoRightDiv\",\n  componentId: \"sc-1n71nmh-5\"\n})([\"flex:3;& > input{width:100%;height:2rem;font-size:1rem;line-height:2rem;padding-left:10px;border:solid 2px #495057;border-radius:4px;transition:0.55s ease;&:hover{border:solid 2px #148cff;}&:focus{border:solid 2px #148cff;}}\"]);\nconst SButton = styled(Button).withConfig({\n  displayName: \"profile__SButton\",\n  componentId: \"sc-1n71nmh-6\"\n})([\"display:inline-block;width:8rem;float:left;\"]);\n\nconst Profile = ({\n  id\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  useEffect(e => {\n    if (!(me && me.id)) {\n      alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\n      Router.push('/');\n      return;\n    }\n\n    if ((me && me.userId) !== id) {\n      alert('잘 못된 접근입니다.');\n      Router.push('/');\n      return;\n    }\n  }, [me && me.userId, id]);\n  return __jsx(SProfileDiv, null, __jsx(ProfileTitle, null, me && me.nickname, \" \\uB2D8 \\uD504\\uB85C\\uD544 \\uC218\\uC815\"), __jsx(InfoCardWrap, null, __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"labe\", null, \"\\uC544\\uC774\\uB514\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    value: me && me.userId\n  }))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uBE44\\uBC00\\uBC88\\uD638\")), __jsx(InfoRightDiv, null, \"\\uBE44\\uBC00\\uBC88\\uD638\\uBCC0\\uACBD\")), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uB2C9\\uB124\\uC784\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    value: me && me.nickname\n  })))), __jsx(SButton, null, \"\\uC218\\uC815\\uD558\\uAE30\"));\n};\n\nProfile.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nProfile.getInitialProps = async context => {\n  const id = context.query.id;\n  return {\n    id\n  };\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/profile.js"],"names":["React","useEffect","PropTypes","styled","Router","useSelector","LOAD_USER_REQUEST","Button","SProfileDiv","div","ProfileTitle","h1","InfoCardWrap","InfoCardDiv","InfoLeftDiv","InfoRightDiv","SButton","Profile","id","me","state","user","e","alert","push","userId","nickname","propTypes","string","isRequired","getInitialProps","context","query"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AAEA,MAAMC,WAAW,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,kCAAjB;AAIA,MAAMC,YAAY,GAAGP,MAAM,CAACQ,EAAV;AAAA;AAAA;AAAA,0EAAlB;AAMA,MAAMC,YAAY,GAAGT,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,gGAAlB;AAOA,MAAMI,WAAW,GAAGV,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,gEAAjB;AAMA,MAAMK,WAAW,GAAGX,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,eAAjB;AAGA,MAAMM,YAAY,GAAGZ,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,wOAAlB;AAwBA,MAAMO,OAAO,GAAGb,MAAM,CAACI,MAAD,CAAT;AAAA;AAAA;AAAA,mDAAb;;AAOA,MAAMU,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAASd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AAEApB,EAAAA,SAAS,CACPqB,CAAC,IAAI;AACH,QAAI,EAAEH,EAAE,IAAIA,EAAE,CAACD,EAAX,CAAJ,EAAoB;AAClBK,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACAnB,MAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ;AACA;AACD;;AACD,QAAI,CAACL,EAAE,IAAIA,EAAE,CAACM,MAAV,MAAsBP,EAA1B,EAA8B;AAC5BK,MAAAA,KAAK,CAAC,aAAD,CAAL;AACAnB,MAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ;AACA;AACD;AACF,GAZM,EAaP,CAACL,EAAE,IAAIA,EAAE,CAACM,MAAV,EAAkBP,EAAlB,CAbO,CAAT;AAgBA,SACE,MAAC,WAAD,QACE,MAAC,YAAD,QAAeC,EAAE,IAAIA,EAAE,CAACO,QAAxB,4CADF,EAEE,MAAC,YAAD,QACE,MAAC,WAAD,QACE,MAAC,WAAD,QACE,yCADF,CADF,EAIE,MAAC,YAAD,QACE;AAAO,IAAA,KAAK,EAAEP,EAAE,IAAIA,EAAE,CAACM;AAAvB,IADF,CAJF,CADF,EASE,MAAC,WAAD,QACE,MAAC,WAAD,QACE,gDADF,CADF,EAIE,MAAC,YAAD,+CAJF,CATF,EAeE,MAAC,WAAD,QACE,MAAC,WAAD,QACE,0CADF,CADF,EAIE,MAAC,YAAD,QACE;AAAO,IAAA,KAAK,EAAEN,EAAE,IAAIA,EAAE,CAACO;AAAvB,IADF,CAJF,CAfF,CAFF,EA0BE,MAAC,OAAD,mCA1BF,CADF;AAoDD,CAvED;;AAyEAT,OAAO,CAACU,SAAR,GAAoB;AAClBT,EAAAA,EAAE,EAAEhB,SAAS,CAAC0B,MAAV,CAAiBC;AADH,CAApB;;AAIAZ,OAAO,CAACa,eAAR,GAA0B,MAAMC,OAAN,IAAiB;AACzC,QAAMb,EAAE,GAAGa,OAAO,CAACC,KAAR,CAAcd,EAAzB;AACA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD,CAHD;;AAKA,eAAeD,OAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Router from 'next/router';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport Button from '../components/designs/Button';\r\n\r\nconst SProfileDiv = styled.div`\r\n  width: 98%;\r\n  margin-top: 10px;\r\n`;\r\nconst ProfileTitle = styled.h1`\r\n  display: inline-block;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  width: 100%;\r\n`;\r\nconst InfoCardWrap = styled.div`\r\n  margin-top: 2rem;\r\n  margin-left: 1.5rem;\r\n  border: solid 1px #495057;\r\n  border-radius: 6px;\r\n  width: 70%;\r\n`;\r\nconst InfoCardDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\nconst InfoLeftDiv = styled.div`\r\n  flex: 1;\r\n`;\r\nconst InfoRightDiv = styled.div`\r\n  flex: 3;\r\n\r\n  & > input {\r\n    width: 100%;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    line-height: 2rem;\r\n    padding-left: 10px;\r\n\r\n    border: solid 2px #495057;\r\n    border-radius: 4px;\r\n\r\n    transition: 0.55s ease;\r\n\r\n    & :hover {\r\n      border: solid 2px #148cff;\r\n    }\r\n    & :focus {\r\n      border: solid 2px #148cff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  display: inline-block;\r\n  width: 8rem;\r\n\r\n  float: left;\r\n`;\r\n\r\nconst Profile = ({ id }) => {\r\n  const { me } = useSelector(state => state.user);\r\n\r\n  useEffect(\r\n    e => {\r\n      if (!(me && me.id)) {\r\n        alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n      if ((me && me.userId) !== id) {\r\n        alert('잘 못된 접근입니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n    },\r\n    [me && me.userId, id],\r\n  );\r\n\r\n  return (\r\n    <SProfileDiv>\r\n      <ProfileTitle>{me && me.nickname} 님 프로필 수정</ProfileTitle>\r\n      <InfoCardWrap>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <labe>아이디</labe>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input value={me && me.userId} />\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>비밀번호</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>비밀번호변경</InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>닉네임</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input value={me && me.nickname} />\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n      </InfoCardWrap>\r\n      <SButton>수정하기</SButton>\r\n      {/* <table>\r\n        <tr>\r\n          <td>아이디</td>\r\n          <td>{me && me.userId}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>닉네임</td>\r\n          <td>{me && me.nickname}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>연재한 글 수</td>\r\n          <td>{me && me.Books.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작 수</td>\r\n          <td>{me && me.LikingBook.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작가 수</td>\r\n          <td>{me && me.LikingUser.length}</td>\r\n        </tr>\r\n      </table> */}\r\n    </SProfileDiv>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nProfile.getInitialProps = async context => {\r\n  const id = context.query.id;\r\n  return { id };\r\n};\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}