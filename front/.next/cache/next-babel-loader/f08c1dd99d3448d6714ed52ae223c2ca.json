{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Button from '../components/designs/Button';\nimport { UPDATE_USER_REQUEST, CHAGNE_UPDATED } from '../reducers/user';\nconst SProfileDiv = styled.div.withConfig({\n  displayName: \"profile__SProfileDiv\",\n  componentId: \"sc-1n71nmh-0\"\n})([\"width:98%;margin-top:10px;\"]);\nconst ProfileTitle = styled.h1.withConfig({\n  displayName: \"profile__ProfileTitle\",\n  componentId: \"sc-1n71nmh-1\"\n})([\"display:inline-block;font-weight:bold;margin-left:10px;width:100%;\"]);\nconst InfoCardWrap = styled.div.withConfig({\n  displayName: \"profile__InfoCardWrap\",\n  componentId: \"sc-1n71nmh-2\"\n})([\"margin-top:2rem;margin-left:1.5rem;border:solid 1px #495057;border-radius:6px;width:70%;\"]);\nconst InfoCardDiv = styled.div.withConfig({\n  displayName: \"profile__InfoCardDiv\",\n  componentId: \"sc-1n71nmh-3\"\n})([\"display:flex;align-items:center;margin:1rem;height:4rem;\"]);\nconst InfoLeftDiv = styled.div.withConfig({\n  displayName: \"profile__InfoLeftDiv\",\n  componentId: \"sc-1n71nmh-4\"\n})([\"flex:1;\"]);\nconst InfoRightDiv = styled.div.withConfig({\n  displayName: \"profile__InfoRightDiv\",\n  componentId: \"sc-1n71nmh-5\"\n})([\"flex:3;display:flex;& > input{width:100%;height:2rem;font-size:1rem;line-height:2rem;padding-left:10px;border:solid 2px #495057;border-radius:4px;transition:0.55s ease;&:hover{border:solid 2px #148cff;}&:focus{border:solid 2px #148cff;}}\"]);\nconst CheckButton = styled(Button).withConfig({\n  displayName: \"profile__CheckButton\",\n  componentId: \"sc-1n71nmh-6\"\n})([\"width:8rem;height:2rem;margin-left:10px;\"]);\nconst ButtonDiv = styled.div.withConfig({\n  displayName: \"profile__ButtonDiv\",\n  componentId: \"sc-1n71nmh-7\"\n})([\"margin:1rem;height:4rem;\"]);\nconst SButton = styled(Button).withConfig({\n  displayName: \"profile__SButton\",\n  componentId: \"sc-1n71nmh-8\"\n})([\"display:block;width:8rem;margin-top:1rem;float:right;\"]);\n\nconst Profile = ({\n  id\n}) => {\n  const {\n    me,\n    isUpdating,\n    isUpdated\n  } = useSelector(state => state.user);\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    userId: '',\n    userNickname: '',\n    userPassword: '',\n    newUserPassword: '',\n    newUserPasswordCheck: ''\n  });\n  const {\n    0: checkUserId,\n    1: setCheckUserId\n  } = useState(false);\n  const {\n    0: checkUserNickname,\n    1: setCheckUserNickname\n  } = useState(false);\n  const {\n    0: checkUserPassword,\n    1: setCheckUserPassword\n  } = useState(false);\n  const {\n    0: passwordErrorReason,\n    1: setPasswordErrorReason\n  } = useState('');\n  const {\n    userId,\n    userPassword,\n    userNickname,\n    newUserPassword,\n    newUserPasswordCheck\n  } = inputs;\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const onChangeInputs = useCallback(e => {\n    if (e.target.name === 'newUserPasswordCheck') {\n      if (e.target.value !== newUserPassword) {\n        setPasswordErrorReason('비밀번호가 일치하지 않습니다.');\n      } else {\n        setPasswordErrorReason('');\n      }\n    }\n\n    setInputs(_objectSpread({}, inputs, {\n      [e.target.name]: e.target.value\n    }));\n  }, [inputs]);\n  useEffect(e => {\n    if (isUpdated) {\n      dispatch({\n        type: CHAGNE_UPDATED\n      });\n    }\n\n    if (!(me && me.id)) {\n      alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\n      router.push('/');\n      return;\n    }\n\n    if ((me && me.userId) !== id) {\n      router.push({\n        pathname: '/pofile',\n        query: {\n          id: me.userId\n        }\n      }, `/profile/${me.userId}`);\n      return;\n    }\n  }, [isUpdated, me && me.userId, id]);\n  const onCheck = useCallback(async e => {\n    if (e.target.name === 'checkUserId') {\n      if (!userId.trim()) {\n        alert('수정 사항이 없습니다.');\n        return;\n      }\n\n      const result = await axios.post(`/user/check`, {\n        type: 'userId',\n        userId\n      });\n\n      if (result.data) {\n        setCheckUserId(true);\n        alert('사용 가능한 아이디입니다.');\n      } else {\n        alert('이미 사용중인 아이디입니다.');\n      }\n    } else if (e.target.name === 'checkUserNickname') {\n      if (!userNickname.trim()) {\n        alert('수정 사항이 없습니다.');\n      }\n\n      const result = await axios.post(`/user/check`, {\n        type: 'userNickname',\n        userNickname\n      });\n\n      if (result.data) {\n        setCheckUserNickname(true);\n        alert('사용 가능한 닉네임입니다.');\n      } else {\n        alert('이미 사용중인 닉네임입니다.');\n      }\n    }\n  }, [userId, userNickname]);\n  const onUpdatePassword = useCallback(e => {\n    if (!checkUserPassword) {\n      setCheckUserPassword(true);\n    }\n  }, [checkUserPassword]);\n  const onUpdateProfile = useCallback(e => {\n    if (!(userId || userPassword || userNickname)) {\n      alert('수정 사항이 없습니다.');\n      return;\n    }\n\n    if (passwordErrorReason !== '') {\n      alert('패스워드가 일치하지 않습니다.');\n    }\n\n    if (userId && !checkUserId) {\n      alert('아이디 중복확인을 해주세요.');\n    }\n\n    if (userNickname && !checkUserNickname) {\n      alert('닉네임 중복확인을 해주세요.');\n    }\n\n    dispatch({\n      type: UPDATE_USER_REQUEST,\n      data: {\n        userId,\n        userPassword,\n        newUserPassword,\n        userNickname\n      }\n    });\n  }, [userId, userPassword, newUserPassword, userNickname, passwordErrorReason, checkUserId, checkUserNickname]);\n  return __jsx(SProfileDiv, null, __jsx(ProfileTitle, null, me && me.nickname, \" \\uB2D8 \\uD504\\uB85C\\uD544 \\uC218\\uC815\"), __jsx(InfoCardWrap, null, __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uC544\\uC774\\uB514\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userId\",\n    value: userId,\n    placeholder: me && me.userId,\n    onChange: onChangeInputs\n  }), checkUserId || __jsx(CheckButton, {\n    name: \"checkUserId\",\n    onClick: onCheck\n  }, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uBE44\\uBC00\\uBC88\\uD638\")), checkUserPassword ? __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"password\",\n    name: \"userPassword\",\n    value: userPassword,\n    placeholder: \"Current Password\",\n    onChange: onChangeInputs\n  }), __jsx(\"input\", {\n    type: \"password\",\n    name: \"newUserPassword\",\n    value: newUserPassword,\n    placeholder: \"New Password\",\n    onChange: onChangeInputs\n  }), __jsx(\"input\", {\n    type: \"password\",\n    name: \"newUserPasswordCheck\",\n    value: newUserPasswordCheck,\n    placeholder: \"Repeat New Password\",\n    onChange: onChangeInputs\n  })) : __jsx(InfoRightDiv, null, __jsx(Button, {\n    size: 'middle',\n    onClick: onUpdatePassword\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uB2C9\\uB124\\uC784\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userNickname\",\n    value: userNickname,\n    placeholder: me && me.nickname,\n    onChange: onChangeInputs\n  }), checkUserNickname || __jsx(CheckButton, {\n    name: \"checkUserNickname\",\n    onClick: onCheck\n  }, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(ButtonDiv, null, __jsx(SButton, {\n    onClick: onUpdateProfile\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"))));\n};\n\nProfile.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nProfile.getInitialProps = async context => {\n  const id = context.query.id;\n  return {\n    id\n  };\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","PropTypes","styled","useRouter","axios","useSelector","useDispatch","Button","UPDATE_USER_REQUEST","CHAGNE_UPDATED","SProfileDiv","div","ProfileTitle","h1","InfoCardWrap","InfoCardDiv","InfoLeftDiv","InfoRightDiv","CheckButton","ButtonDiv","SButton","Profile","id","me","isUpdating","isUpdated","state","user","inputs","setInputs","userId","userNickname","userPassword","newUserPassword","newUserPasswordCheck","checkUserId","setCheckUserId","checkUserNickname","setCheckUserNickname","checkUserPassword","setCheckUserPassword","passwordErrorReason","setPasswordErrorReason","dispatch","router","onChangeInputs","e","target","name","value","type","alert","push","pathname","query","onCheck","trim","result","post","data","onUpdatePassword","onUpdateProfile","nickname","propTypes","string","isRequired","getInitialProps","context"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { useRouter } from 'next/router';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Button from '../components/designs/Button';\r\nimport { UPDATE_USER_REQUEST, CHAGNE_UPDATED } from '../reducers/user';\r\n\r\nconst SProfileDiv = styled.div`\r\n  width: 98%;\r\n  margin-top: 10px;\r\n`;\r\nconst ProfileTitle = styled.h1`\r\n  display: inline-block;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  width: 100%;\r\n`;\r\nconst InfoCardWrap = styled.div`\r\n  margin-top: 2rem;\r\n  margin-left: 1.5rem;\r\n  border: solid 1px #495057;\r\n  border-radius: 6px;\r\n  width: 70%;\r\n`;\r\nconst InfoCardDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\nconst InfoLeftDiv = styled.div`\r\n  flex: 1;\r\n`;\r\nconst InfoRightDiv = styled.div`\r\n  flex: 3;\r\n  display: flex;\r\n  & > input {\r\n    width: 100%;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    line-height: 2rem;\r\n    padding-left: 10px;\r\n\r\n    border: solid 2px #495057;\r\n    border-radius: 4px;\r\n\r\n    transition: 0.55s ease;\r\n\r\n    & :hover {\r\n      border: solid 2px #148cff;\r\n    }\r\n    & :focus {\r\n      border: solid 2px #148cff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckButton = styled(Button)`\r\n  width: 8rem;\r\n  height: 2rem;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst ButtonDiv = styled.div`\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  display: block;\r\n  width: 8rem;\r\n  margin-top: 1rem;\r\n\r\n  float: right;\r\n`;\r\n\r\nconst Profile = ({ id }) => {\r\n  const { me, isUpdating, isUpdated } = useSelector(state => state.user);\r\n\r\n  const [inputs, setInputs] = useState({\r\n    userId: '',\r\n    userNickname: '',\r\n    userPassword: '',\r\n    newUserPassword: '',\r\n    newUserPasswordCheck: '',\r\n  });\r\n  const [checkUserId, setCheckUserId] = useState(false);\r\n  const [checkUserNickname, setCheckUserNickname] = useState(false);\r\n  const [checkUserPassword, setCheckUserPassword] = useState(false);\r\n  const [passwordErrorReason, setPasswordErrorReason] = useState('');\r\n  const {\r\n    userId,\r\n    userPassword,\r\n    userNickname,\r\n    newUserPassword,\r\n    newUserPasswordCheck,\r\n  } = inputs;\r\n\r\n  const dispatch = useDispatch();\r\n  const router = useRouter();\r\n\r\n  const onChangeInputs = useCallback(\r\n    e => {\r\n      if (e.target.name === 'newUserPasswordCheck') {\r\n        if (e.target.value !== newUserPassword) {\r\n          setPasswordErrorReason('비밀번호가 일치하지 않습니다.');\r\n        } else {\r\n          setPasswordErrorReason('');\r\n        }\r\n      }\r\n      setInputs({\r\n        ...inputs,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    },\r\n    [inputs],\r\n  );\r\n\r\n  useEffect(\r\n    e => {\r\n      if (isUpdated) {\r\n        dispatch({\r\n          type: CHAGNE_UPDATED,\r\n        });\r\n      }\r\n      if (!(me && me.id)) {\r\n        alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\r\n        router.push('/');\r\n        return;\r\n      }\r\n      if ((me && me.userId) !== id) {\r\n        router.push(\r\n          { pathname: '/pofile', query: { id: me.userId } },\r\n          `/profile/${me.userId}`,\r\n        );\r\n        return;\r\n      }\r\n    },\r\n    [isUpdated, me && me.userId, id],\r\n  );\r\n\r\n  const onCheck = useCallback(\r\n    async e => {\r\n      if (e.target.name === 'checkUserId') {\r\n        if (!userId.trim()) {\r\n          alert('수정 사항이 없습니다.');\r\n          return;\r\n        }\r\n        const result = await axios.post(`/user/check`, {\r\n          type: 'userId',\r\n          userId,\r\n        });\r\n        if (result.data) {\r\n          setCheckUserId(true);\r\n          alert('사용 가능한 아이디입니다.');\r\n        } else {\r\n          alert('이미 사용중인 아이디입니다.');\r\n        }\r\n      } else if (e.target.name === 'checkUserNickname') {\r\n        if (!userNickname.trim()) {\r\n          alert('수정 사항이 없습니다.');\r\n        }\r\n        const result = await axios.post(`/user/check`, {\r\n          type: 'userNickname',\r\n          userNickname,\r\n        });\r\n        if (result.data) {\r\n          setCheckUserNickname(true);\r\n          alert('사용 가능한 닉네임입니다.');\r\n        } else {\r\n          alert('이미 사용중인 닉네임입니다.');\r\n        }\r\n      }\r\n    },\r\n    [userId, userNickname],\r\n  );\r\n\r\n  const onUpdatePassword = useCallback(\r\n    e => {\r\n      if (!checkUserPassword) {\r\n        setCheckUserPassword(true);\r\n      }\r\n    },\r\n    [checkUserPassword],\r\n  );\r\n\r\n  const onUpdateProfile = useCallback(\r\n    e => {\r\n      if (!(userId || userPassword || userNickname)) {\r\n        alert('수정 사항이 없습니다.');\r\n        return;\r\n      }\r\n      if (passwordErrorReason !== '') {\r\n        alert('패스워드가 일치하지 않습니다.');\r\n      }\r\n      if (userId && !checkUserId) {\r\n        alert('아이디 중복확인을 해주세요.');\r\n      }\r\n      if (userNickname && !checkUserNickname) {\r\n        alert('닉네임 중복확인을 해주세요.');\r\n      }\r\n      dispatch({\r\n        type: UPDATE_USER_REQUEST,\r\n        data: {\r\n          userId,\r\n          userPassword,\r\n          newUserPassword,\r\n          userNickname,\r\n        },\r\n      });\r\n    },\r\n    [\r\n      userId,\r\n      userPassword,\r\n      newUserPassword,\r\n      userNickname,\r\n      passwordErrorReason,\r\n      checkUserId,\r\n      checkUserNickname,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <SProfileDiv>\r\n      <ProfileTitle>{me && me.nickname} 님 프로필 수정</ProfileTitle>\r\n      <InfoCardWrap>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>아이디</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userId\"\r\n              value={userId}\r\n              placeholder={me && me.userId}\r\n              onChange={onChangeInputs}\r\n            />\r\n            {checkUserId || (\r\n              <CheckButton name=\"checkUserId\" onClick={onCheck}>\r\n                중복확인\r\n              </CheckButton>\r\n            )}\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>비밀번호</label>\r\n          </InfoLeftDiv>\r\n          {checkUserPassword ? (\r\n            <InfoRightDiv>\r\n              <input\r\n                type=\"password\"\r\n                name=\"userPassword\"\r\n                value={userPassword}\r\n                placeholder=\"Current Password\"\r\n                onChange={onChangeInputs}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                name=\"newUserPassword\"\r\n                value={newUserPassword}\r\n                placeholder=\"New Password\"\r\n                onChange={onChangeInputs}\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                name=\"newUserPasswordCheck\"\r\n                value={newUserPasswordCheck}\r\n                placeholder=\"Repeat New Password\"\r\n                onChange={onChangeInputs}\r\n              />\r\n            </InfoRightDiv>\r\n          ) : (\r\n            <InfoRightDiv>\r\n              <Button size={'middle'} onClick={onUpdatePassword}>\r\n                비밀번호 변경\r\n              </Button>\r\n            </InfoRightDiv>\r\n          )}\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>닉네임</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userNickname\"\r\n              value={userNickname}\r\n              placeholder={me && me.nickname}\r\n              onChange={onChangeInputs}\r\n            />\r\n            {checkUserNickname || (\r\n              <CheckButton name=\"checkUserNickname\" onClick={onCheck}>\r\n                중복확인\r\n              </CheckButton>\r\n            )}\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <ButtonDiv>\r\n          <SButton onClick={onUpdateProfile}>수정하기</SButton>\r\n        </ButtonDiv>\r\n      </InfoCardWrap>\r\n    </SProfileDiv>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nProfile.getInitialProps = async context => {\r\n  const id = context.query.id;\r\n  return { id };\r\n};\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}