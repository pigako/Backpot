{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadBords),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddBoard),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bookSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_FAILURE, ADD_BOARD_SUCCESS } from '../reducers/board';\n\nfunction watchLoadBords() {\n  return _regeneratorRuntime.wrap(function watchLoadBords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(1000, LOAD_BOARDS_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function loadBoards(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadBoards$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function () {\n                      var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n                      return axios.get(\"/boards?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n                    }, action.lastId);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_BOARDS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_BOARDS_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, loadBoards, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchAddBoard() {\n  return _regeneratorRuntime.wrap(function watchAddBoard$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_BOARD_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function addBoard(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function addBoard$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(function (boardData) {\n                      return axios.post(\"/board\", boardData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: ADD_BOARD_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.log(_context3.t0);\n                    _context3.next = 13;\n                    return put({\n                      type: ADD_BOARD_FAILURE,\n                      error: _context3.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, addBoard, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function bookSaga() {\n  return _regeneratorRuntime.wrap(function bookSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLoadBords), fork(watchAddBoard)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["watchLoadBords","watchAddBoard","bookSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_FAILURE","ADD_BOARD_SUCCESS","loadBoards","action","lastId","limit","get","result","type","data","console","log","error","addBoard","boardData","post","withCredentials"],"mappings":";;;;yBAWUA,c;;;yBAoBAC,a;;;yBAsBeC,Q;;AArDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,mBAPP;;AASA,SAAUf,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,QAAQ,CAAC,IAAD,EAAOI,mBAAP;AAAA;AAAA,mCAA4B,SAAUM,UAAV,CAAqBC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvB,2BAAMb,IAAI,CAAC,YAA4B;AAAA,0BAA3Bc,MAA2B,uEAAlB,CAAkB;AAAA,0BAAfC,KAAe,uEAAP,EAAO;AACpD,6BAAOV,KAAK,CAACW,GAAN,0BAA4BF,MAA5B,oBAA4CC,KAA5C,EAAP;AACD,qBAFwB,EAEtBF,MAAM,CAACC,MAFe,CAAV;;AAFuB;AAEhCG,oBAAAA,MAFgC;AAAA;AAKtC,2BAAMb,GAAG,CAAC;AACRc,sBAAAA,IAAI,EAAEX,mBADE;AAERY,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AALsC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUtCC,oBAAAA,OAAO,CAACC,GAAR;AAVsC;AAWtC,2BAAMjB,GAAG,CAAC;AACRc,sBAAAA,IAAI,EAAEV,mBADE;AAERc,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAXsC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUV,UAAV;AAAA,WAA5B,EAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUf,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACM,iBAAD;AAAA;AAAA,mCAAoB,SAAUc,QAAV,CAAmBV,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjB,2BAAMb,IAAI,CAAC,UAAAwB,SAAS,EAAI;AACrC,6BAAOnB,KAAK,CAACoB,IAAN,WAAqBD,SAArB,EAAgC;AACrCE,wBAAAA,eAAe,EAAE;AADoB,uBAAhC,CAAP;AAGD,qBAJwB,EAItBb,MAAM,CAACM,IAJe,CAAV;;AAFiB;AAE1BF,oBAAAA,MAF0B;AAAA;AAOhC,2BAAMb,GAAG,CAAC;AACRc,sBAAAA,IAAI,EAAEP,iBADE;AAERQ,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AAPgC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYhCC,oBAAAA,OAAO,CAACC,GAAR;AAZgC;AAahC,2BAAMjB,GAAG,CAAC;AACRc,sBAAAA,IAAI,EAAER,iBADE;AAERY,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUC,QAAV;AAAA,WAApB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,eAAe,SAAUzB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACL,cAAD,CAAL,EAAuBK,IAAI,CAACJ,aAAD,CAA3B,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_FAILURE,\r\n  ADD_BOARD_SUCCESS,\r\n} from '../reducers/board';\r\n\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBords), fork(watchAddBoard)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}