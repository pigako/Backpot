{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_IN_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user'; // 로그인\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, function* login(action) {\n    try {\n      const result = yield call(loginData => {\n        return axios.post('/user/login', loginData, {\n          withCredentials: true\n        });\n      }, action.data);\n      console.log('login result', result);\n      yield put({\n        type: LOG_IN_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOG_IN_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 회원가입\n\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\n    try {\n      const result = yield call(signUpData => {\n        return axios.post('/user/signup', signUpData);\n      }, action.data);\n      yield put({\n        type: SIGN_UP_SUCCESS,\n        data: result\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: SIGN_UP_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/user.js"],"names":["all","fork","takeEvery","takeLatest","call","put","axios","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_IN_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","watchLogin","login","action","result","loginData","post","withCredentials","data","console","log","type","e","error","watchSignUp","signUp","signUpData","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,IALF,EAMEC,GANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP,C,CASA;;AACA,UAAUC,UAAV,GAAuB;AACrB,QAAMV,UAAU,CAACI,cAAD,EAAiB,UAAUO,KAAV,CAAgBC,MAAhB,EAAwB;AACvD,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACa,SAAS,IAAI;AACrC,eAAOX,KAAK,CAACY,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAC1CE,UAAAA,eAAe,EAAE;AADyB,SAArC,CAAP;AAGD,OAJwB,EAItBJ,MAAM,CAACK,IAJe,CAAzB;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,MAA5B;AACA,YAAMX,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEd,cADE;AAERW,QAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,OAAD,CAAT;AAID,KAXD,CAWE,OAAOI,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,YAAMnB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEf,cADE;AAERiB,QAAAA,KAAK,EAAED;AAFC,OAAD,CAAT;AAID;AACF,GAnBe,CAAhB;AAoBD,C,CAED;;;AACA,UAAUE,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACO,eAAD,EAAkB,UAAUiB,MAAV,CAAiBZ,MAAjB,EAAyB;AACzD,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACwB,UAAU,IAAI;AACtC,eAAOtB,KAAK,CAACY,IAAN,CAAW,cAAX,EAA2BU,UAA3B,CAAP;AACD,OAFwB,EAEtBb,MAAM,CAACK,IAFe,CAAzB;AAGA,YAAMf,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEX,eADE;AAERQ,QAAAA,IAAI,EAAEJ;AAFE,OAAD,CAAT;AAID,KARD,CAQE,OAAOQ,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,YAAMnB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEZ,eADE;AAERc,QAAAA,KAAK,EAAED;AAFC,OAAD,CAAT;AAID;AACF,GAhBe,CAAhB;AAiBD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACyB,WAAD,CAAL,EAAoBzB,IAAI,CAACY,UAAD,CAAxB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n  call,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// 로그인\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, function* login(action) {\r\n    try {\r\n      const result = yield call(loginData => {\r\n        return axios.post('/user/login', loginData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      console.log('login result', result);\r\n      yield put({\r\n        type: LOG_IN_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOG_IN_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// 회원가입\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\r\n    try {\r\n      const result = yield call(signUpData => {\r\n        return axios.post('/user/signup', signUpData);\r\n      }, action.data);\r\n      yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n        data: result,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchSignUp), fork(watchLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}