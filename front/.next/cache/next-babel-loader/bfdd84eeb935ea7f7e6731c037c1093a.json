{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadBooks),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bookSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOOKS_REQUEST, LOAD_BOOKS_SUCCESS, LOAD_BOOKS_FAILURE } from '../reducers/book'; // 전체 연재글 가져오기\n\nfunction watchLoadBooks() {\n  return _regeneratorRuntime.wrap(function watchLoadBooks$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(1000, LOAD_BOOKS_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function loadBooks(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function loadBooks$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function () {\n                      var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n                      return axios.get(\"/books?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n                    }, action.lastId);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_BOARDS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_BOOKS_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, loadBooks, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function bookSaga() {\n  return _regeneratorRuntime.wrap(function bookSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadBooks)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/book.js"],"names":["watchLoadBooks","bookSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_BOOKS_REQUEST","LOAD_BOOKS_SUCCESS","LOAD_BOOKS_FAILURE","loadBooks","action","lastId","limit","get","result","type","LOAD_BOARDS_SUCCESS","data","console","log","error"],"mappings":";;;;yBASUA,c;;;yBAoBeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,kBAJP,C,CAMA;;AACA,SAAUX,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,QAAQ,CAAC,IAAD,EAAOI,kBAAP;AAAA;AAAA,mCAA2B,SAAUG,SAAV,CAAoBC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB,2BAAMV,IAAI,CAAC,YAA4B;AAAA,0BAA3BW,MAA2B,uEAAlB,CAAkB;AAAA,0BAAfC,KAAe,uEAAP,EAAO;AACpD,6BAAOP,KAAK,CAACQ,GAAN,yBAA2BF,MAA3B,oBAA2CC,KAA3C,EAAP;AACD,qBAFwB,EAEtBF,MAAM,CAACC,MAFe,CAAV;;AAFsB;AAE/BG,oBAAAA,MAF+B;AAAA;AAKrC,2BAAMV,GAAG,CAAC;AACRW,sBAAAA,IAAI,EAAEC,mBADE;AAERC,sBAAAA,IAAI,EAAEH,MAAM,CAACG;AAFL,qBAAD,CAAT;;AALqC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUrCC,oBAAAA,OAAO,CAACC,GAAR;AAVqC;AAWrC,2BAAMf,GAAG,CAAC;AACRW,sBAAAA,IAAI,EAAEP,kBADE;AAERY,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAXqC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUX,SAAV;AAAA,WAA3B,EAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,cAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOOKS_REQUEST,\r\n  LOAD_BOOKS_SUCCESS,\r\n  LOAD_BOOKS_FAILURE,\r\n} from '../reducers/book';\r\n\r\n// 전체 연재글 가져오기\r\nfunction* watchLoadBooks() {\r\n  yield throttle(1000, LOAD_BOOKS_REQUEST, function* loadBooks(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 20) => {\r\n        return axios.get(`/books?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOOKS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBooks)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}