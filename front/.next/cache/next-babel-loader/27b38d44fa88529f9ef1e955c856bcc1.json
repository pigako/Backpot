{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, LOAD_BOARD_REQUEST, LOAD_BOARD_SUCCESS, LOAD_BOARD_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_SUCCESS, ADD_BOARD_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_BOARD_REQUEST, DELETE_BOARD_FAILURE, DELETE_BOARD_SUCCESS, UPDATE_BOARD_REQUEST, UPDATE_BOARD_SUCCESS, UPDATE_BOARD_FAILURE } from '../reducers/board'; // 전체 게시글 가져오기\n\nfunction* watchLoadBords() {\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\n    try {\n      const result = yield call((lastId = 0, limit = 30) => {\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOARDS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOARDS_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 가져오기\n\n\nfunction* watchLoadBoard() {\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\n    try {\n      const result = yield call(boardId => {\n        return axios.get(`/board/${boardId}`);\n      }, action.boardId);\n      yield put({\n        type: LOAD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      put({\n        type: LOAD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 추가하기\n\n\nfunction* watchAddBoard() {\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\n    try {\n      const result = yield call(boardData => {\n        return axios.post(`/board`, boardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 수정\n\n\nfunction* watchUpdateBoard() {\n  yield takeLatest(UPDATE_BOARD_REQUEST, function* updateBoard(action) {\n    try {\n      const result = yield call(updateBoardData => {\n        return axios.patch(`/board`, updateBoardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 삭제\n\n\nfunction* watchDeleteBoard() {\n  yield takeLatest(DELETE_BOARD_REQUEST, function* deleteBoard(action) {\n    try {\n      const result = yield call(boardId => {\n        return axios.delete(`/board/${boardId}`, {\n          withCredentials: true\n        });\n      }, action.boardId);\n      yield put({\n        type: DELETE_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 추가\n// 댓글 수정\n// 댓글 삭제\n\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\n    try {\n      const result = yield call(commentId => {\n        return axios.delete(`/board/comment/${commentId}`, {\n          withCredentials: true\n        });\n      }, action.commentId);\n      yield put({\n        type: DELETE_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBords), fork(watchLoadBoard), fork(watchAddBoard), fork(watchUpdateBoard), fork(watchDeleteBoard), // fork(watchAddComment),\n  // fork(watchUpdateComment),\n  fork(watchDeleteComment)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","LOAD_BOARD_REQUEST","LOAD_BOARD_SUCCESS","LOAD_BOARD_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_SUCCESS","ADD_BOARD_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","DELETE_BOARD_REQUEST","DELETE_BOARD_FAILURE","DELETE_BOARD_SUCCESS","UPDATE_BOARD_REQUEST","UPDATE_BOARD_SUCCESS","UPDATE_BOARD_FAILURE","watchLoadBords","loadBoards","action","result","lastId","limit","get","type","data","e","console","log","error","watchLoadBoard","loadBoard","boardId","watchAddBoard","addBoard","boardData","post","withCredentials","watchUpdateBoard","updateBoard","updateBoardData","patch","watchDeleteBoard","deleteBoard","delete","watchDeleteComment","commentId","bookSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,iBAPF,EAQEC,iBARF,EASEC,iBATF,EAUEC,sBAVF,EAWEC,sBAXF,EAYEC,sBAZF,EAaEC,oBAbF,EAcEC,oBAdF,EAeEC,oBAfF,EAgBEC,oBAhBF,EAiBEC,oBAjBF,EAkBEC,oBAlBF,QAmBO,mBAnBP,C,CAqBA;;AACA,UAAUC,cAAV,GAA2B;AACzB,QAAMtB,QAAQ,CAAC,IAAD,EAAOI,mBAAP,EAA4B,UAAUmB,UAAV,CAAqBC,MAArB,EAA6B;AACrE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC,CAAC4B,MAAM,GAAG,CAAV,EAAaC,KAAK,GAAG,EAArB,KAA4B;AACpD,eAAOxB,KAAK,CAACyB,GAAN,CAAW,kBAAiBF,MAAO,UAASC,KAAM,EAAlD,CAAP;AACD,OAFwB,EAEtBH,MAAM,CAACE,MAFe,CAAzB;AAGA,YAAMxB,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAExB,mBADE;AAERyB,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAM7B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEvB,mBADE;AAER4B,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAhBa,CAAd;AAiBD,C,CACD;;;AACA,UAAUI,cAAV,GAA2B;AACzB,QAAMlC,UAAU,CAACM,kBAAD,EAAqB,UAAU6B,SAAV,CAAoBZ,MAApB,EAA4B;AAC/D,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACuC,OAAO,IAAI;AACnC,eAAOlC,KAAK,CAACyB,GAAN,CAAW,UAASS,OAAQ,EAA5B,CAAP;AACD,OAFwB,EAEtBb,MAAM,CAACa,OAFe,CAAzB;AAGA,YAAMnC,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAErB,kBADE;AAERsB,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA7B,MAAAA,GAAG,CAAC;AACF2B,QAAAA,IAAI,EAAEpB,kBADJ;AAEFyB,QAAAA,KAAK,EAAEH;AAFL,OAAD,CAAH;AAID;AACF,GAhBe,CAAhB;AAiBD,C,CACD;;;AACA,UAAUO,aAAV,GAA0B;AACxB,QAAMrC,UAAU,CAACS,iBAAD,EAAoB,UAAU6B,QAAV,CAAmBf,MAAnB,EAA2B;AAC7D,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC0C,SAAS,IAAI;AACrC,eAAOrC,KAAK,CAACsC,IAAN,CAAY,QAAZ,EAAqBD,SAArB,EAAgC;AACrCE,UAAAA,eAAe,EAAE;AADoB,SAAhC,CAAP;AAGD,OAJwB,EAItBlB,MAAM,CAACM,IAJe,CAAzB;AAKA,YAAM5B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAElB,iBADE;AAERmB,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAM7B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEjB,iBADE;AAERsB,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD,C,CACD;;;AACA,UAAUY,gBAAV,GAA6B;AAC3B,QAAM1C,UAAU,CAACkB,oBAAD,EAAuB,UAAUyB,WAAV,CAAsBpB,MAAtB,EAA8B;AACnE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC+C,eAAe,IAAI;AAC3C,eAAO1C,KAAK,CAAC2C,KAAN,CAAa,QAAb,EAAsBD,eAAtB,EAAuC;AAC5CH,UAAAA,eAAe,EAAE;AAD2B,SAAvC,CAAP;AAGD,OAJwB,EAItBlB,MAAM,CAACM,IAJe,CAAzB;AAKA,YAAM5B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAET,oBADE;AAERU,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAM7B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAER,oBADE;AAERa,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD,C,CACD;;;AACA,UAAUgB,gBAAV,GAA6B;AAC3B,QAAM9C,UAAU,CAACe,oBAAD,EAAuB,UAAUgC,WAAV,CAAsBxB,MAAtB,EAA8B;AACnE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACuC,OAAO,IAAI;AACnC,eAAOlC,KAAK,CAAC8C,MAAN,CAAc,UAASZ,OAAQ,EAA/B,EAAkC;AACvCK,UAAAA,eAAe,EAAE;AADsB,SAAlC,CAAP;AAGD,OAJwB,EAItBlB,MAAM,CAACa,OAJe,CAAzB;AAKA,YAAMnC,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEX,oBADE;AAERY,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAM7B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEZ,oBADE;AAERiB,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD,C,CACD;AACA;AACA;;;AACA,UAAUmB,kBAAV,GAA+B;AAC7B,QAAMjD,UAAU,CAACY,sBAAD,EAAyB,UAAUmC,WAAV,CAAsBxB,MAAtB,EAA8B;AACrE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM3B,IAAI,CAACqD,SAAS,IAAI;AACrC,eAAOhD,KAAK,CAAC8C,MAAN,CAAc,kBAAiBE,SAAU,EAAzC,EAA4C;AACjDT,UAAAA,eAAe,EAAE;AADgC,SAA5C,CAAP;AAGD,OAJwB,EAItBlB,MAAM,CAAC2B,SAJe,CAAzB;AAKA,YAAMjD,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEf,sBADE;AAERgB,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAM7B,GAAG,CAAC;AACR2B,QAAAA,IAAI,EAAEd,sBADE;AAERmB,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAlBe,CAAhB;AAmBD;;AAED,eAAe,UAAUqB,QAAV,GAAqB;AAClC,QAAMvD,GAAG,CAAC,CACRE,IAAI,CAACuB,cAAD,CADI,EAERvB,IAAI,CAACoC,cAAD,CAFI,EAGRpC,IAAI,CAACuC,aAAD,CAHI,EAIRvC,IAAI,CAAC4C,gBAAD,CAJI,EAKR5C,IAAI,CAACgD,gBAAD,CALI,EAMR;AACA;AACAhD,EAAAA,IAAI,CAACmD,kBAAD,CARI,CAAD,CAAT;AAUD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  LOAD_BOARD_REQUEST,\r\n  LOAD_BOARD_SUCCESS,\r\n  LOAD_BOARD_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n  ADD_BOARD_FAILURE,\r\n  DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n  DELETE_BOARD_REQUEST,\r\n  DELETE_BOARD_FAILURE,\r\n  DELETE_BOARD_SUCCESS,\r\n  UPDATE_BOARD_REQUEST,\r\n  UPDATE_BOARD_SUCCESS,\r\n  UPDATE_BOARD_FAILURE,\r\n} from '../reducers/board';\r\n\r\n// 전체 게시글 가져오기\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 가져오기\r\nfunction* watchLoadBoard() {\r\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.get(`/board/${boardId}`);\r\n      }, action.boardId);\r\n      yield put({\r\n        type: LOAD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      put({\r\n        type: LOAD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 추가하기\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 수정\r\nfunction* watchUpdateBoard() {\r\n  yield takeLatest(UPDATE_BOARD_REQUEST, function* updateBoard(action) {\r\n    try {\r\n      const result = yield call(updateBoardData => {\r\n        return axios.patch(`/board`, updateBoardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 삭제\r\nfunction* watchDeleteBoard() {\r\n  yield takeLatest(DELETE_BOARD_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.delete(`/board/${boardId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.boardId);\r\n      yield put({\r\n        type: DELETE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 추가\r\n// 댓글 수정\r\n// 댓글 삭제\r\nfunction* watchDeleteComment() {\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(commentId => {\r\n        return axios.delete(`/board/comment/${commentId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.commentId);\r\n      yield put({\r\n        type: DELETE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([\r\n    fork(watchLoadBords),\r\n    fork(watchLoadBoard),\r\n    fork(watchAddBoard),\r\n    fork(watchUpdateBoard),\r\n    fork(watchDeleteBoard),\r\n    // fork(watchAddComment),\r\n    // fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}