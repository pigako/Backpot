{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_FAILURE, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, UPDATE_USER_REQUEST, UPDATE_USER_FAILURE, UPDATE_USER_SUCCESS } from '../reducers/user'; // 로그인\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, function* login(action) {\n    try {\n      const result = yield call(loginData => {\n        return axios.post('/user/login', loginData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: LOG_IN_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOG_IN_FAILURE,\n        error: e\n      });\n      alert('로그인에 실패했습니다.');\n    }\n  });\n} // 로그아웃\n\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, function* logout() {\n    try {\n      yield call(() => {\n        return axios.post('/user/logout', {}, {\n          withCredentials: true\n        });\n      });\n      yield put({\n        type: LOG_OUT_SUCCESS\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOG_OUT_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 회원가입\n\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\n    try {\n      const result = yield call(signUpData => {\n        return axios.post('/user/signup', signUpData);\n      }, action.data);\n      yield put({\n        type: SIGN_UP_SUCCESS,\n        data: result\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: SIGN_UP_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 유저 정보 가져오기\n\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : `/user`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* watchUpdateUser() {\n  yield takeLatest(UPDATE_USER_REQUEST, function* () {\n    try {\n      const result = yield call(updateData => {\n        return axios.patch('/user', updateData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_USER_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_USER_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchLogin), fork(watchLogout), fork(watchLoadUser), fork(watchUpdateUser)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/user.js"],"names":["all","fork","takeEvery","takeLatest","call","put","axios","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_FAILURE","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_FAILURE","UPDATE_USER_SUCCESS","watchLogin","login","action","result","loginData","post","withCredentials","data","type","e","console","log","error","alert","watchLogout","logout","watchSignUp","signUp","signUpData","loadUserAPI","userId","get","loadUser","me","watchLoadUser","watchUpdateUser","updateData","patch","userSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n  call,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  UPDATE_USER_REQUEST,\r\n  UPDATE_USER_FAILURE,\r\n  UPDATE_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// 로그인\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, function* login(action) {\r\n    try {\r\n      const result = yield call(loginData => {\r\n        return axios.post('/user/login', loginData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: LOG_IN_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOG_IN_FAILURE,\r\n        error: e,\r\n      });\r\n      alert('로그인에 실패했습니다.');\r\n    }\r\n  });\r\n}\r\n\r\n// 로그아웃\r\nfunction* watchLogout() {\r\n  yield takeLatest(LOG_OUT_REQUEST, function* logout() {\r\n    try {\r\n      yield call(() => {\r\n        return axios.post(\r\n          '/user/logout',\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        );\r\n      });\r\n      yield put({\r\n        type: LOG_OUT_SUCCESS,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOG_OUT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// 회원가입\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\r\n    try {\r\n      const result = yield call(signUpData => {\r\n        return axios.post('/user/signup', signUpData);\r\n      }, action.data);\r\n      yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n        data: result,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 유저 정보 가져오기\r\nfunction loadUserAPI(userId) {\r\n  return axios.get(userId ? `/user/${userId}` : `/user`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(loadUserAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n      me: !action.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction* watchUpdateUser() {\r\n  yield takeLatest(UPDATE_USER_REQUEST, function*() {\r\n    try {\r\n      const result = yield call(updateData => {\r\n        return axios.patch('/user', updateData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchSignUp),\r\n    fork(watchLogin),\r\n    fork(watchLogout),\r\n    fork(watchLoadUser),\r\n    fork(watchUpdateUser),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}