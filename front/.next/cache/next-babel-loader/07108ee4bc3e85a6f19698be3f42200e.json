{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadEpisode),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(episodeSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE } from '../reducers/episode';\n\nfunction watchLoadEpisode() {\n  return _regeneratorRuntime.wrap(function watchLoadEpisode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function (episodeId) {\n                      return axios.get(\"/episode/\".concat(episodeId));\n                    }, action.id);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_EPISODE_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function episodeSaga() {\n  return _regeneratorRuntime.wrap(function episodeSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadEpisode)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["watchLoadEpisode","episodeSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","action","episodeId","get","id","result","type","data","console","log","error"],"mappings":";;;;yBAQUA,gB;;;yBAoBeC,W;;AA5BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,qBAJP;;AAMA,SAAUX,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACG,oBAAD;AAAA;AAAA,mCAAuB,iBAAUG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,2BAAMT,IAAI,CAAC,UAAAU,SAAS,EAAI;AACrC,6BAAOL,KAAK,CAACM,GAAN,oBAAsBD,SAAtB,EAAP;AACD,qBAFwB,EAEtBD,MAAM,CAACG,EAFe,CAAV;;AAFoB;AAE7BC,oBAAAA,MAF6B;AAAA;AAKnC,2BAAMT,GAAG,CAAC;AACRU,sBAAAA,IAAI,EAAEP,oBADE;AAERQ,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AALmC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnCC,oBAAAA,OAAO,CAACC,GAAR;AAVmC;AAWnC,2BAAMb,GAAG,CAAC;AACRU,sBAAAA,IAAI,EAAEN,oBADE;AAERU,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAXmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,gBAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n} from '../reducers/episode';\r\n\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([fork(watchLoadEpisode)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}