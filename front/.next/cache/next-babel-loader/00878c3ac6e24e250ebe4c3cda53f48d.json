{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user'; // 회원가입\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function signUp(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function signUp$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function (signUpData) {\n                      return axios.post('/signup', {\n                        signUpData: signUpData\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: SIGN_UP_SUCCESS,\n                      data: result\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: SIGN_UP_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, signUp, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/user.js"],"names":["watchSignUp","userSaga","all","fork","takeEvery","takeLatest","call","put","axios","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","signUp","action","signUpData","post","data","result","type","console","log","error"],"mappings":";;;;yBAgBUA,W;;;yBAoBeC,Q;;AApCzB,SACEC,GADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,IALF,EAMEC,GANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,eAHF,QAIO,kBAJP,C,CAMA;;AACA,SAAUX,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACI,eAAD;AAAA;AAAA,mCAAkB,SAAUG,MAAV,CAAiBC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf,2BAAMP,IAAI,CAAC,UAAAQ,UAAU,EAAI;AACtC,6BAAON,KAAK,CAACO,IAAN,CAAW,SAAX,EAAsB;AAAED,wBAAAA,UAAU,EAAVA;AAAF,uBAAtB,CAAP;AACD,qBAFwB,EAEtBD,MAAM,CAACG,IAFe,CAAV;;AAFe;AAExBC,oBAAAA,MAFwB;AAAA;AAK9B,2BAAMV,GAAG,CAAC;AACRW,sBAAAA,IAAI,EAAEP,eADE;AAERK,sBAAAA,IAAI,EAAEC;AAFE,qBAAD,CAAT;;AAL8B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAU9BE,oBAAAA,OAAO,CAACC,GAAR;AAV8B;AAW9B,2BAAMb,GAAG,CAAC;AACRW,sBAAAA,IAAI,EAAER,eADE;AAERW,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AAX8B;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUT,MAAV;AAAA,WAAlB,EAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,WAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n  call,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// 회원가입\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, function* signUp(action) {\r\n    try {\r\n      const result = yield call(signUpData => {\r\n        return axios.post('/signup', { signUpData });\r\n      }, action.data);\r\n      yield put({\r\n        type: SIGN_UP_SUCCESS,\r\n        data: result,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: SIGN_UP_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}