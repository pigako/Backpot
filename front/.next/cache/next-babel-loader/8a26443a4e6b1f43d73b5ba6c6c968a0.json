{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadEpisode),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddEpisode),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddRecommend),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(episodeSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE, ADD_EPISODE_REQUEST, ADD_EPISODE_SUCCESS, ADD_EPISODE_FAILURE, ADD_RECOMMEND_REQUEST, ADD_RECOMMEND_SUCCESS, ADD_RECOMMEND_FAILURE } from '../reducers/episode'; // 글 조회\n\nfunction watchLoadEpisode() {\n  return _regeneratorRuntime.wrap(function watchLoadEpisode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function (episodeId) {\n                      return axios.get(\"/episode/\".concat(episodeId));\n                    }, action.id);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: LOAD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: LOAD_EPISODE_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n} // 글 작성\n\n\nfunction watchAddEpisode() {\n  return _regeneratorRuntime.wrap(function watchAddEpisode$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_EPISODE_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee2(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(function (episodeData) {\n                      return axios.post(\"/episode\", episodeData, {\n                        withCredentials: true\n                      });\n                    }, action.data);\n\n                  case 3:\n                    result = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: ADD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.log(_context3.t0);\n                    _context3.next = 13;\n                    return put({\n                      type: ADD_EPISODE_FAILURE,\n                      error: _context3.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n} // 추천\n\n\nfunction watchAddRecommend() {\n  return _regeneratorRuntime.wrap(function watchAddRecommend$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_RECOMMEND_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee3(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(function (episodeId) {\n                      return axios.post(\"/episode/\".concat(episodeId), {}, {\n                        withCredentials: true\n                      });\n                    }, action.id);\n\n                  case 3:\n                    result = _context5.sent;\n                    _context5.next = 6;\n                    return put({\n                      type: ADD_EPISODE_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context5.next = 13;\n                    break;\n\n                  case 8:\n                    _context5.prev = 8;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    console.log(_context5.t0);\n                    _context5.next = 13;\n                    return put({\n                      type: ADD_EPISODE_FAILURE,\n                      error: _context5.t0\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function episodeSaga() {\n  return _regeneratorRuntime.wrap(function episodeSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLoadEpisode), fork(watchAddEpisode), fork(watchAddRecommend)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["watchLoadEpisode","watchAddEpisode","watchAddRecommend","episodeSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","ADD_EPISODE_REQUEST","ADD_EPISODE_SUCCESS","ADD_EPISODE_FAILURE","ADD_RECOMMEND_REQUEST","ADD_RECOMMEND_SUCCESS","ADD_RECOMMEND_FAILURE","action","episodeId","get","id","result","type","data","console","log","error","episodeData","post","withCredentials"],"mappings":"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","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n  ADD_EPISODE_REQUEST,\r\n  ADD_EPISODE_SUCCESS,\r\n  ADD_EPISODE_FAILURE,\r\n  ADD_RECOMMEND_REQUEST,\r\n  ADD_RECOMMEND_SUCCESS,\r\n  ADD_RECOMMEND_FAILURE,\r\n} from '../reducers/episode';\r\n\r\n// 글 조회\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 글 작성\r\nfunction* watchAddEpisode() {\r\n  yield takeLatest(ADD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeData => {\r\n        return axios.post(`/episode`, episodeData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 추천\r\nfunction* watchAddRecommend() {\r\n  yield takeLatest(ADD_RECOMMEND_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.post(\r\n          `/episode/${episodeId}`,\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        );\r\n      }, action.id);\r\n      yield put({\r\n        type: ADD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([\r\n    fork(watchLoadEpisode),\r\n    fork(watchAddEpisode),\r\n    fork(watchAddRecommend),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}