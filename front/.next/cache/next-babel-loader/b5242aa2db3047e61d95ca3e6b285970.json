{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport BookCard from '../components/BookCard';\nimport { LOAD_BOOKS_REQUEST } from '../reducers/book';\nconst BookListTitle = styled.h1.withConfig({\n  displayName: \"booklist__BookListTitle\",\n  componentId: \"sc-1s39sfx-0\"\n})([\"margin:10px 0px 10px 0px;font-weight:bold;\"]);\nconst NovelList = styled.div.withConfig({\n  displayName: \"booklist__NovelList\",\n  componentId: \"sc-1s39sfx-1\"\n})([\"width:98%;overflow:hidden;\"]);\n\nconst BookList = () => {\n  const {\n    books,\n    hasMoreBooks,\n    keyword\n  } = useSelector(state => state.book);\n  const dispatch = useDispatch();\n  const countRef = useRef([]);\n  const onScroll = useCallback(() => {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMoreBooks) {\n        let lastId = books[books.length - 1].id;\n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_BOOKS_REQUEST,\n            lastId,\n            keyword\n          });\n          countRef.current.push(lastId);\n        }\n      }\n    }\n  }, [hasMoreBooks, books.length, keyword]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.addEventListener('scroll', onScroll);\n    };\n  }, [books.length]);\n  return __jsx(\"div\", null, __jsx(BookListTitle, null, \"\\uC5F0\\uC7AC\\uC18C\\uC124 \\uBAA9\\uB85D\"), __jsx(NovelList, null, books && books.map(book => {\n    return __jsx(BookCard, {\n      key: +book.id,\n      book: book,\n      nickname: book.User.nickname\n    });\n  })));\n};\n\nBookList.getInitialProps = async context => {\n  const state = context.store.getState();\n  context.store.dispatch({\n    type: LOAD_BOOKS_REQUEST,\n    lastId: 0,\n    keyword: state.book.keyword\n  });\n};\n\nexport default BookList;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/booklist.js"],"names":["React","useEffect","styled","useSelector","BookCard","LOAD_BOOKS_REQUEST","BookListTitle","h1","NovelList","div","BookList","books","hasMoreBooks","keyword","state","book","dispatch","useDispatch","countRef","useRef","onScroll","useCallback","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","map","User","nickname","getInitialProps","context","store","getState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,MAAMC,aAAa,GAAGJ,MAAM,CAACK,EAAV;AAAA;AAAA;AAAA,kDAAnB;AAKA,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,kCAAf;;AAKA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBC,IAAAA;AAAvB,MAAmCV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAApD;AACA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAAC,EAAD,CAAvB;AAEA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,QACEC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACAF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAF1C,EAGE;AACA,UAAIf,YAAJ,EAAkB;AAChB,YAAIgB,MAAM,GAAGjB,KAAK,CAACA,KAAK,CAACkB,MAAN,GAAe,CAAhB,CAAL,CAAwBC,EAArC;;AACA,YAAI,CAACZ,QAAQ,CAACa,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAL,EAAwC;AACtCZ,UAAAA,QAAQ,CAAC;AACPiB,YAAAA,IAAI,EAAE5B,kBADC;AAEPuB,YAAAA,MAFO;AAGPf,YAAAA;AAHO,WAAD,CAAR;AAKAK,UAAAA,QAAQ,CAACa,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB;AACD;AACF;AACF;AACF,GAjB2B,EAiBzB,CAAChB,YAAD,EAAeD,KAAK,CAACkB,MAArB,EAA6BhB,OAA7B,CAjByB,CAA5B;AAmBAZ,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCf,QAAlC;AACA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCf,QAAlC;AACD,KAFD;AAGD,GALQ,EAKN,CAACT,KAAK,CAACkB,MAAP,CALM,CAAT;AAOA,SACE,mBACE,MAAC,aAAD,gDADF,EAEE,MAAC,SAAD,QACGlB,KAAK,IACJA,KAAK,CAACyB,GAAN,CAAUrB,IAAI,IAAI;AAChB,WACE,MAAC,QAAD;AACE,MAAA,GAAG,EAAE,CAACA,IAAI,CAACe,EADb;AAEE,MAAA,IAAI,EAAEf,IAFR;AAGE,MAAA,QAAQ,EAAEA,IAAI,CAACsB,IAAL,CAAUC;AAHtB,MADF;AAOD,GARD,CAFJ,CAFF,CADF;AAiBD,CAhDD;;AAkDA5B,QAAQ,CAAC6B,eAAT,GAA2B,MAAMC,OAAN,IAAiB;AAC1C,QAAM1B,KAAK,GAAG0B,OAAO,CAACC,KAAR,CAAcC,QAAd,EAAd;AACAF,EAAAA,OAAO,CAACC,KAAR,CAAczB,QAAd,CAAuB;AACrBiB,IAAAA,IAAI,EAAE5B,kBADe;AAErBuB,IAAAA,MAAM,EAAE,CAFa;AAGrBf,IAAAA,OAAO,EAAEC,KAAK,CAACC,IAAN,CAAWF;AAHC,GAAvB;AAKD,CAPD;;AASA,eAAeH,QAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport BookCard from '../components/BookCard';\r\nimport { LOAD_BOOKS_REQUEST } from '../reducers/book';\r\n\r\nconst BookListTitle = styled.h1`\r\n  margin: 10px 0px 10px 0px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst NovelList = styled.div`\r\n  width: 98%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst BookList = () => {\r\n  const { books, hasMoreBooks, keyword } = useSelector(state => state.book);\r\n  const dispatch = useDispatch();\r\n  const countRef = useRef([]);\r\n\r\n  const onScroll = useCallback(() => {\r\n    if (\r\n      window.scrollY + document.documentElement.clientHeight >\r\n      document.documentElement.scrollHeight - 300\r\n    ) {\r\n      if (hasMoreBooks) {\r\n        let lastId = books[books.length - 1].id;\r\n        if (!countRef.current.includes(lastId)) {\r\n          dispatch({\r\n            type: LOAD_BOOKS_REQUEST,\r\n            lastId,\r\n            keyword,\r\n          });\r\n          countRef.current.push(lastId);\r\n        }\r\n      }\r\n    }\r\n  }, [hasMoreBooks, books.length, keyword]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.addEventListener('scroll', onScroll);\r\n    };\r\n  }, [books.length]);\r\n\r\n  return (\r\n    <div>\r\n      <BookListTitle>연재소설 목록</BookListTitle>\r\n      <NovelList>\r\n        {books &&\r\n          books.map(book => {\r\n            return (\r\n              <BookCard\r\n                key={+book.id}\r\n                book={book}\r\n                nickname={book.User.nickname}\r\n              />\r\n            );\r\n          })}\r\n      </NovelList>\r\n    </div>\r\n  );\r\n};\r\n\r\nBookList.getInitialProps = async context => {\r\n  const state = context.store.getState();\r\n  context.store.dispatch({\r\n    type: LOAD_BOOKS_REQUEST,\r\n    lastId: 0,\r\n    keyword: state.book.keyword,\r\n  });\r\n};\r\n\r\nexport default BookList;\r\n"]},"metadata":{},"sourceType":"module"}