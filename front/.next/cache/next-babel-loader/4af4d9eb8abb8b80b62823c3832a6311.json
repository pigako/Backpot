{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport Router from 'next/router';\nimport Button from '../../components/designs/Button';\nimport { UPDATE_EPISODE_REQUEST, CHANGE_UPDATEDEPISODE, LOAD_EPISODE_REQUEST } from '../../reducers/episode';\nconst UpdateEpisodeDiv = styled.div.withConfig({\n  displayName: \"update__UpdateEpisodeDiv\",\n  componentId: \"nxzyol-0\"\n})([\"width:98%;margin:1rem 0rem 0rem 1rem;\"]);\nconst UpdateEpisodeTopDiv = styled.div.withConfig({\n  displayName: \"update__UpdateEpisodeTopDiv\",\n  componentId: \"nxzyol-1\"\n})([\"position:relative;margin-bottom:2rem;\"]);\nconst BookTitle = styled.h1.withConfig({\n  displayName: \"update__BookTitle\",\n  componentId: \"nxzyol-2\"\n})([\"font-weight:bold;font-size:1rem;margin-bottom:1rem;\"]);\nconst TopButtonDiv = styled.div.withConfig({\n  displayName: \"update__TopButtonDiv\",\n  componentId: \"nxzyol-3\"\n})([\"position:absolute;top:5%;right:1%;\"]);\nconst EpisodeForm = styled.form.withConfig({\n  displayName: \"update__EpisodeForm\",\n  componentId: \"nxzyol-4\"\n})([\"\"]);\nconst UpdateEpisodeContentDiv = styled.div.withConfig({\n  displayName: \"update__UpdateEpisodeContentDiv\",\n  componentId: \"nxzyol-5\"\n})([\"margin:1.5rem;\"]);\nconst DivCard = styled.div.withConfig({\n  displayName: \"update__DivCard\",\n  componentId: \"nxzyol-6\"\n})([\"display:flex;align-items:center;margin:1rem;width:100%;\"]);\nconst DivCardLeft = styled.div.withConfig({\n  displayName: \"update__DivCardLeft\",\n  componentId: \"nxzyol-7\"\n})([\"flex:1;\"]);\nconst DivCardRight = styled.div.withConfig({\n  displayName: \"update__DivCardRight\",\n  componentId: \"nxzyol-8\"\n})([\"flex:4;display:flex;& > input{width:calc(100% - 2rem);height:2rem;font-size:1rem;line-height:2rem;padding-left:10px;border:solid 2px #495057;border-radius:4px;transition:0.55s ease;&:hover{border:solid 2px #148cff;}&:focus{border:solid 2px #148cff;}}\"]);\nconst CheckBox = styled.input.withConfig({\n  displayName: \"update__CheckBox\",\n  componentId: \"nxzyol-9\"\n})([\"width:1.5rem !important;height:1.5rem !important;\"]);\nconst UpdateEditorDiv = styled.div.withConfig({\n  displayName: \"update__UpdateEditorDiv\",\n  componentId: \"nxzyol-10\"\n})([\"margin:1rem;& > label{width:100%;display:inline-block;margin-bottom:1rem;padding-bottom:1rem;border-bottom:solid 2px #495057;}\"]);\nconst LoadingImg = styled.img.withConfig({\n  displayName: \"update__LoadingImg\",\n  componentId: \"nxzyol-11\"\n})([\"margin-top:4px;height:1.5rem;\"]);\n\nconst Update = () => {\n  const {\n    episode,\n    isUpdatingEpisode,\n    isUpdatedEpisode\n  } = useSelector(state => state.episode);\n  const dispatch = useDispatch();\n  const {\n    0: checkNotice,\n    1: setCheckNotice\n  } = useState(episode && episode.isNotice === 1 ? true : false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(episode && episode.title);\n  const {\n    0: text,\n    1: setText\n  } = useState(episode && episode.content.split('<br/><br/><p><strong>작가의 말</strong><hr><br/>')[0]);\n  const {\n    0: writerComment,\n    1: setWriterComment\n  } = useState(episode && episode.content.split('<br/><br/><p><strong>작가의 말</strong><hr><br/>')[1] || '');\n  const onChangeCheckNotice = useCallback(() => {\n    setCheckNotice(!checkNotice);\n  }, [checkNotice]);\n  const onChangeTitle = useCallback(e => {\n    setTitle(e.target.value);\n  }, []);\n  const editorRef = useRef();\n  const {\n    0: editorLoded,\n    1: setEditorLoded\n  } = useState(false);\n  const {\n    CKEditor,\n    ClassicEditor\n  } = editorRef.current || {};\n  useEffect(() => {\n    editorRef.current = {\n      CKEditor: require('@ckeditor/ckeditor5-react'),\n      ClassicEditor: require('@ckeditor/ckeditor5-build-classic')\n    };\n    setEditorLoded(true);\n  }, []);\n  useEffect(() => {\n    if (isUpdatedEpisode) {\n      dispatch({\n        type: CHANGE_UPDATEDEPISODE\n      });\n      Router.push({\n        pathname: `/episode`,\n        query: {\n          id: episode.id\n        }\n      }, `/episode/${episode.id}`);\n    }\n  }, [isUpdatedEpisode, episode && episode.id]);\n  const onCancleUpdate = useCallback(() => {\n    Router.back();\n  }, []); //\n\n  const onWriteEpisode = useCallback(e => {\n    e.preventDefault();\n    const episodeContent = text + '<br/><br/><p><strong>작가의 말</strong><hr><br/>' + writerComment;\n    dispatch({\n      type: UPDATE_EPISODE_REQUEST,\n      data: {\n        id: episode && episode.id,\n        title: title,\n        content: episodeContent,\n        notice: checkNotice ? 1 : 0\n      }\n    });\n  }, [episode && episode.id, checkNotice, title, text, writerComment]);\n  return __jsx(UpdateEpisodeDiv, null, __jsx(Helmet, null, __jsx(\"title\", null, episode && episode.title), __jsx(\"style\", {\n    type: \"text/css\"\n  }, `\n            .ck.ck-editor {width:100%;}\n            .ck-editor__editable { height: 500px;}\n          `)), __jsx(EpisodeForm, {\n    onSubmit: onWriteEpisode\n  }, __jsx(UpdateEpisodeTopDiv, null, __jsx(BookTitle, null, episode && episode.title), __jsx(TopButtonDiv, null, __jsx(Button, {\n    color: \"pink\",\n    type: \"button\",\n    onClick: onCancleUpdate\n  }, \"\\uCDE8\\uC18C\"), __jsx(Button, {\n    type: \"submit\"\n  }, isUpdatingEpisode ? __jsx(LoadingImg, {\n    src: \"/static/icons/loading_blue.gif\"\n  }) : '수정'))), __jsx(UpdateEpisodeContentDiv, null, __jsx(DivCard, null, __jsx(DivCardLeft, null, __jsx(\"label\", null, \"\\uC774 \\uAE00\\uC744 \\uACF5\\uC9C0\\uB85C \\uC791\\uC131\")), __jsx(DivCardRight, null, __jsx(CheckBox, {\n    type: \"checkbox\",\n    value: checkNotice,\n    onChange: onChangeCheckNotice\n  }))), __jsx(DivCard, null, __jsx(DivCardLeft, null, __jsx(\"label\", null, \"\\uC81C\\uBAA9\")), __jsx(DivCardRight, null, __jsx(\"input\", {\n    type: \"text\",\n    value: title,\n    onChange: onChangeTitle\n  }))), __jsx(UpdateEditorDiv, null, __jsx(\"label\", null, \"\\uBCF8\\uBB38\"), editorLoded ? __jsx(CKEditor, {\n    editor: ClassicEditor,\n    data: text,\n    onChange: (event, editor) => {\n      const data = editor.getData();\n      setText(data);\n    }\n  }) : __jsx(\"p\", null, \"Editor Loding\")), __jsx(UpdateEditorDiv, null, __jsx(\"label\", null, \"\\uC791\\uAC00\\uC758 \\uB9D0\"), editorLoded ? __jsx(CKEditor, {\n    editor: ClassicEditor,\n    data: writerComment,\n    onChange: (event, editor) => {\n      const data = editor.getData();\n      setWriterComment(data);\n    }\n  }) : __jsx(\"p\", null, \"Editor Loding\")))));\n};\n\nUpdate.getInitialProps = async context => {\n  const episodeId = context.query.episodeid;\n  context.store.dispatch({\n    type: LOAD_EPISODE_REQUEST,\n    id: episodeId\n  });\n};\n\nexport default Update;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/episode/update.js"],"names":["React","useState","useEffect","useRef","useCallback","styled","useSelector","useDispatch","Helmet","Router","Button","UPDATE_EPISODE_REQUEST","CHANGE_UPDATEDEPISODE","LOAD_EPISODE_REQUEST","UpdateEpisodeDiv","div","UpdateEpisodeTopDiv","BookTitle","h1","TopButtonDiv","EpisodeForm","form","UpdateEpisodeContentDiv","DivCard","DivCardLeft","DivCardRight","CheckBox","input","UpdateEditorDiv","LoadingImg","img","Update","episode","isUpdatingEpisode","isUpdatedEpisode","state","dispatch","checkNotice","setCheckNotice","isNotice","title","setTitle","text","setText","content","split","writerComment","setWriterComment","onChangeCheckNotice","onChangeTitle","e","target","value","editorRef","editorLoded","setEditorLoded","CKEditor","ClassicEditor","current","require","type","push","pathname","query","id","onCancleUpdate","back","onWriteEpisode","preventDefault","episodeContent","data","notice","event","editor","getData","getInitialProps","context","episodeId","episodeid","store"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Helmet from 'react-helmet';\r\nimport Router from 'next/router';\r\n\r\nimport Button from '../../components/designs/Button';\r\nimport {\r\n  UPDATE_EPISODE_REQUEST,\r\n  CHANGE_UPDATEDEPISODE,\r\n  LOAD_EPISODE_REQUEST,\r\n} from '../../reducers/episode';\r\n\r\nconst UpdateEpisodeDiv = styled.div`\r\n  width: 98%;\r\n  margin: 1rem 0rem 0rem 1rem;\r\n`;\r\n\r\nconst UpdateEpisodeTopDiv = styled.div`\r\n  position: relative;\r\n\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst BookTitle = styled.h1`\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst TopButtonDiv = styled.div`\r\n  position: absolute;\r\n  top: 5%;\r\n  right: 1%;\r\n`;\r\n\r\nconst EpisodeForm = styled.form``;\r\n\r\nconst UpdateEpisodeContentDiv = styled.div`\r\n  margin: 1.5rem;\r\n`;\r\n\r\nconst DivCard = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1rem;\r\n\r\n  width: 100%;\r\n`;\r\nconst DivCardLeft = styled.div`\r\n  flex: 1;\r\n`;\r\nconst DivCardRight = styled.div`\r\n  flex: 4;\r\n  display: flex;\r\n\r\n  & > input {\r\n    width: calc(100% - 2rem);\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    line-height: 2rem;\r\n    padding-left: 10px;\r\n\r\n    border: solid 2px #495057;\r\n    border-radius: 4px;\r\n\r\n    transition: 0.55s ease;\r\n    & :hover {\r\n      border: solid 2px #148cff;\r\n    }\r\n    & :focus {\r\n      border: solid 2px #148cff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckBox = styled.input`\r\n  width: 1.5rem !important;\r\n  height: 1.5rem !important;\r\n`;\r\n\r\nconst UpdateEditorDiv = styled.div`\r\n  margin: 1rem;\r\n  & > label {\r\n    width: 100%;\r\n    display: inline-block;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 1rem;\r\n    border-bottom: solid 2px #495057;\r\n  }\r\n`;\r\n\r\nconst LoadingImg = styled.img`\r\n  margin-top: 4px;\r\n  height: 1.5rem;\r\n`;\r\n\r\nconst Update = () => {\r\n  const { episode, isUpdatingEpisode, isUpdatedEpisode } = useSelector(\r\n    state => state.episode,\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [checkNotice, setCheckNotice] = useState(\r\n    episode && episode.isNotice === 1 ? true : false,\r\n  );\r\n  const [title, setTitle] = useState(episode && episode.title);\r\n  const [text, setText] = useState(\r\n    episode &&\r\n      episode.content.split(\r\n        '<br/><br/><p><strong>작가의 말</strong><hr><br/>',\r\n      )[0],\r\n  );\r\n  const [writerComment, setWriterComment] = useState(\r\n    (episode &&\r\n      episode.content.split(\r\n        '<br/><br/><p><strong>작가의 말</strong><hr><br/>',\r\n      )[1]) ||\r\n      '',\r\n  );\r\n\r\n  const onChangeCheckNotice = useCallback(() => {\r\n    setCheckNotice(!checkNotice);\r\n  }, [checkNotice]);\r\n\r\n  const onChangeTitle = useCallback(e => {\r\n    setTitle(e.target.value);\r\n  }, []);\r\n\r\n  const editorRef = useRef();\r\n  const [editorLoded, setEditorLoded] = useState(false);\r\n  const { CKEditor, ClassicEditor } = editorRef.current || {};\r\n\r\n  useEffect(() => {\r\n    editorRef.current = {\r\n      CKEditor: require('@ckeditor/ckeditor5-react'),\r\n      ClassicEditor: require('@ckeditor/ckeditor5-build-classic'),\r\n    };\r\n    setEditorLoded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isUpdatedEpisode) {\r\n      dispatch({\r\n        type: CHANGE_UPDATEDEPISODE,\r\n      });\r\n      Router.push(\r\n        { pathname: `/episode`, query: { id: episode.id } },\r\n        `/episode/${episode.id}`,\r\n      );\r\n    }\r\n  }, [isUpdatedEpisode, episode && episode.id]);\r\n\r\n  const onCancleUpdate = useCallback(() => {\r\n    Router.back();\r\n  }, []);\r\n\r\n  //\r\n  const onWriteEpisode = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const episodeContent =\r\n        text +\r\n        '<br/><br/><p><strong>작가의 말</strong><hr><br/>' +\r\n        writerComment;\r\n      dispatch({\r\n        type: UPDATE_EPISODE_REQUEST,\r\n        data: {\r\n          id: episode && episode.id,\r\n          title: title,\r\n          content: episodeContent,\r\n          notice: checkNotice ? 1 : 0,\r\n        },\r\n      });\r\n    },\r\n    [episode && episode.id, checkNotice, title, text, writerComment],\r\n  );\r\n\r\n  return (\r\n    <UpdateEpisodeDiv>\r\n      <Helmet>\r\n        <title>{episode && episode.title}</title>\r\n        <style type=\"text/css\">\r\n          {`\r\n            .ck.ck-editor {width:100%;}\r\n            .ck-editor__editable { height: 500px;}\r\n          `}\r\n        </style>\r\n      </Helmet>\r\n      <EpisodeForm onSubmit={onWriteEpisode}>\r\n        <UpdateEpisodeTopDiv>\r\n          <BookTitle>{episode && episode.title}</BookTitle>\r\n          <TopButtonDiv>\r\n            <Button color=\"pink\" type=\"button\" onClick={onCancleUpdate}>\r\n              취소\r\n            </Button>\r\n            <Button type=\"submit\">\r\n              {isUpdatingEpisode ? (\r\n                <LoadingImg src=\"/static/icons/loading_blue.gif\" />\r\n              ) : (\r\n                '수정'\r\n              )}\r\n            </Button>\r\n          </TopButtonDiv>\r\n        </UpdateEpisodeTopDiv>\r\n        <UpdateEpisodeContentDiv>\r\n          <DivCard>\r\n            <DivCardLeft>\r\n              <label>이 글을 공지로 작성</label>\r\n            </DivCardLeft>\r\n            <DivCardRight>\r\n              <CheckBox\r\n                type=\"checkbox\"\r\n                value={checkNotice}\r\n                onChange={onChangeCheckNotice}\r\n              />\r\n            </DivCardRight>\r\n          </DivCard>\r\n          <DivCard>\r\n            <DivCardLeft>\r\n              <label>제목</label>\r\n            </DivCardLeft>\r\n            <DivCardRight>\r\n              <input type=\"text\" value={title} onChange={onChangeTitle} />\r\n            </DivCardRight>\r\n          </DivCard>\r\n\r\n          <UpdateEditorDiv>\r\n            <label>본문</label>\r\n            {editorLoded ? (\r\n              <CKEditor\r\n                editor={ClassicEditor}\r\n                data={text}\r\n                onChange={(event, editor) => {\r\n                  const data = editor.getData();\r\n                  setText(data);\r\n                }}\r\n              />\r\n            ) : (\r\n              <p>Editor Loding</p>\r\n            )}\r\n          </UpdateEditorDiv>\r\n          <UpdateEditorDiv>\r\n            <label>작가의 말</label>\r\n            {editorLoded ? (\r\n              <CKEditor\r\n                editor={ClassicEditor}\r\n                data={writerComment}\r\n                onChange={(event, editor) => {\r\n                  const data = editor.getData();\r\n                  setWriterComment(data);\r\n                }}\r\n              />\r\n            ) : (\r\n              <p>Editor Loding</p>\r\n            )}\r\n          </UpdateEditorDiv>\r\n        </UpdateEpisodeContentDiv>\r\n      </EpisodeForm>\r\n    </UpdateEpisodeDiv>\r\n  );\r\n};\r\n\r\nUpdate.getInitialProps = async context => {\r\n  const episodeId = context.query.episodeid;\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_EPISODE_REQUEST,\r\n    id: episodeId,\r\n  });\r\n};\r\n\r\nexport default Update;\r\n"]},"metadata":{},"sourceType":"module"}