{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Router from 'next/router';\nimport { useSelector } from 'react-redux';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport Button from '../components/designs/Button';\nconst SProfileDiv = styled.div.withConfig({\n  displayName: \"profile__SProfileDiv\",\n  componentId: \"sc-1n71nmh-0\"\n})([\"width:98%;margin-top:10px;\"]);\nconst ProfileTitle = styled.h1.withConfig({\n  displayName: \"profile__ProfileTitle\",\n  componentId: \"sc-1n71nmh-1\"\n})([\"display:inline-block;font-weight:bold;margin-left:10px;width:100%;\"]);\nconst InfoCardWrap = styled.div.withConfig({\n  displayName: \"profile__InfoCardWrap\",\n  componentId: \"sc-1n71nmh-2\"\n})([\"margin-top:2rem;margin-left:1.5rem;border:solid 1px #495057;border-radius:6px;width:70%;\"]);\nconst InfoCardDiv = styled.div.withConfig({\n  displayName: \"profile__InfoCardDiv\",\n  componentId: \"sc-1n71nmh-3\"\n})([\"display:flex;align-items:center;margin:1rem;height:4rem;\"]);\nconst InfoLeftDiv = styled.div.withConfig({\n  displayName: \"profile__InfoLeftDiv\",\n  componentId: \"sc-1n71nmh-4\"\n})([\"flex:1;\"]);\nconst InfoRightDiv = styled.div.withConfig({\n  displayName: \"profile__InfoRightDiv\",\n  componentId: \"sc-1n71nmh-5\"\n})([\"flex:3;display:flex;& > input{width:100%;height:2rem;font-size:1rem;line-height:2rem;padding-left:10px;border:solid 2px #495057;border-radius:4px;transition:0.55s ease;&:hover{border:solid 2px #148cff;}&:focus{border:solid 2px #148cff;}}\"]);\nconst CheckButton = styled(Button).withConfig({\n  displayName: \"profile__CheckButton\",\n  componentId: \"sc-1n71nmh-6\"\n})([\"width:8rem;height:2rem;margin-left:10px;\"]);\nconst ButtonDiv = styled.div.withConfig({\n  displayName: \"profile__ButtonDiv\",\n  componentId: \"sc-1n71nmh-7\"\n})([\"margin:1rem;height:4rem;\"]);\nconst SButton = styled(Button).withConfig({\n  displayName: \"profile__SButton\",\n  componentId: \"sc-1n71nmh-8\"\n})([\"display:block;width:8rem;margin-top:1rem;float:right;\"]);\n\nconst Profile = ({\n  id\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    userId: '',\n    userPassword: '',\n    userNickname: ''\n  });\n  const {\n    userId,\n    userPassword,\n    userNickname\n  } = inputs;\n  const onChangeInputs = useCallback(e => {\n    setInputs(_objectSpread({}, inputs, {\n      [e.target.name]: e.target.value\n    }));\n  }, [inputs]);\n  useEffect(e => {\n    if (!(me && me.id)) {\n      alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\n      Router.push('/');\n      return;\n    }\n\n    if ((me && me.userId) !== id) {\n      alert('잘 못된 접근입니다.');\n      Router.push('/');\n      return;\n    }\n  }, [me && me.userId, id]);\n  const onUpdatePassword = useCallback(e => {}, []);\n  const onUpdateProfile = useCallback(e => {\n    if (!(userId || userPassword || userNickname)) {\n      alert('수정 사항이 없습니다.');\n      return;\n    }\n  }, [userId, userPassword, userNickname]);\n  return __jsx(SProfileDiv, null, __jsx(ProfileTitle, null, me && me.nickname, \" \\uB2D8 \\uD504\\uB85C\\uD544 \\uC218\\uC815\"), __jsx(InfoCardWrap, null, __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uC544\\uC774\\uB514\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userId\",\n    value: userId,\n    placeholder: me && me.userId,\n    onChange: onChangeInputs\n  }), __jsx(CheckButton, null, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uBE44\\uBC00\\uBC88\\uD638\")), __jsx(InfoRightDiv, null, __jsx(Button, {\n    size: 'middle',\n    onClick: onUpdatePassword\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uB2C9\\uB124\\uC784\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userNickname\",\n    value: userNickname,\n    placeholder: me && me.nickname,\n    onChange: onChangeInputs\n  }), __jsx(CheckButton, null, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(ButtonDiv, null, __jsx(SButton, {\n    onClick: onUpdateProfile\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"))));\n};\n\nProfile.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nProfile.getInitialProps = async context => {\n  const id = context.query.id;\n  return {\n    id\n  };\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","PropTypes","styled","Router","useSelector","LOAD_USER_REQUEST","Button","SProfileDiv","div","ProfileTitle","h1","InfoCardWrap","InfoCardDiv","InfoLeftDiv","InfoRightDiv","CheckButton","ButtonDiv","SButton","Profile","id","me","state","user","inputs","setInputs","userId","userPassword","userNickname","onChangeInputs","e","target","name","value","alert","push","onUpdatePassword","onUpdateProfile","nickname","propTypes","string","isRequired","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Router from 'next/router';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport Button from '../components/designs/Button';\r\n\r\nconst SProfileDiv = styled.div`\r\n  width: 98%;\r\n  margin-top: 10px;\r\n`;\r\nconst ProfileTitle = styled.h1`\r\n  display: inline-block;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  width: 100%;\r\n`;\r\nconst InfoCardWrap = styled.div`\r\n  margin-top: 2rem;\r\n  margin-left: 1.5rem;\r\n  border: solid 1px #495057;\r\n  border-radius: 6px;\r\n  width: 70%;\r\n`;\r\nconst InfoCardDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\nconst InfoLeftDiv = styled.div`\r\n  flex: 1;\r\n`;\r\nconst InfoRightDiv = styled.div`\r\n  flex: 3;\r\n  display: flex;\r\n  & > input {\r\n    width: 100%;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    line-height: 2rem;\r\n    padding-left: 10px;\r\n\r\n    border: solid 2px #495057;\r\n    border-radius: 4px;\r\n\r\n    transition: 0.55s ease;\r\n\r\n    & :hover {\r\n      border: solid 2px #148cff;\r\n    }\r\n    & :focus {\r\n      border: solid 2px #148cff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckButton = styled(Button)`\r\n  width: 8rem;\r\n  height: 2rem;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst ButtonDiv = styled.div`\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  display: block;\r\n  width: 8rem;\r\n  margin-top: 1rem;\r\n\r\n  float: right;\r\n`;\r\n\r\nconst Profile = ({ id }) => {\r\n  const { me } = useSelector(state => state.user);\r\n\r\n  const [inputs, setInputs] = useState({\r\n    userId: '',\r\n    userPassword: '',\r\n    userNickname: '',\r\n  });\r\n\r\n  const { userId, userPassword, userNickname } = inputs;\r\n\r\n  const onChangeInputs = useCallback(\r\n    e => {\r\n      setInputs({\r\n        ...inputs,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    },\r\n    [inputs],\r\n  );\r\n\r\n  useEffect(\r\n    e => {\r\n      if (!(me && me.id)) {\r\n        alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n      if ((me && me.userId) !== id) {\r\n        alert('잘 못된 접근입니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n    },\r\n    [me && me.userId, id],\r\n  );\r\n\r\n  const onUpdatePassword = useCallback(e => {}, []);\r\n  const onUpdateProfile = useCallback(\r\n    e => {\r\n      if (!(userId || userPassword || userNickname)) {\r\n        alert('수정 사항이 없습니다.');\r\n        return;\r\n      }\r\n    },\r\n    [userId, userPassword, userNickname],\r\n  );\r\n  return (\r\n    <SProfileDiv>\r\n      <ProfileTitle>{me && me.nickname} 님 프로필 수정</ProfileTitle>\r\n      <InfoCardWrap>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>아이디</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userId\"\r\n              value={userId}\r\n              placeholder={me && me.userId}\r\n              onChange={onChangeInputs}\r\n            />\r\n            <CheckButton>중복확인</CheckButton>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>비밀번호</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <Button size={'middle'} onClick={onUpdatePassword}>\r\n              비밀번호 변경\r\n            </Button>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>닉네임</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userNickname\"\r\n              value={userNickname}\r\n              placeholder={me && me.nickname}\r\n              onChange={onChangeInputs}\r\n            />\r\n            <CheckButton>중복확인</CheckButton>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <ButtonDiv>\r\n          <SButton onClick={onUpdateProfile}>수정하기</SButton>\r\n        </ButtonDiv>\r\n      </InfoCardWrap>\r\n      {/* <table>\r\n        <tr>\r\n          <td>아이디</td>\r\n          <td>{me && me.userId}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>닉네임</td>\r\n          <td>{me && me.nickname}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>연재한 글 수</td>\r\n          <td>{me && me.Books.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작 수</td>\r\n          <td>{me && me.LikingBook.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작가 수</td>\r\n          <td>{me && me.LikingUser.length}</td>\r\n        </tr>\r\n      </table> */}\r\n    </SProfileDiv>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nProfile.getInitialProps = async context => {\r\n  const id = context.query.id;\r\n  return { id };\r\n};\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}