{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE, ADD_EPISODE_REQUEST, ADD_EPISODE_SUCCESS, ADD_EPISODE_FAILURE, ADD_RECOMMEND_REQUEST, ADD_RECOMMEND_SUCCESS, ADD_RECOMMEND_FAILURE, UPDATE_EPISODE_REQUEST, UPDATE_EPISODE_SUCCESS, UPDATE_EPISODE_FAILURE, DELETE_EPISODE_REQUEST, DELETE_EPISODE_SUCCESS, DELETE_EPISODE_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, UPDATE_COMMENT_REQUEST, UPDATE_COMMENT_SUCCESS, UPDATE_COMMENT_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE } from '../reducers/episode'; // 글 조회\n\nfunction* watchLoadEpisode() {\n  yield takeLatest(LOAD_EPISODE_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeId => {\n        return axios.get(`/episode/${episodeId}`);\n      }, action.id);\n      yield put({\n        type: LOAD_EPISODE_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 글 작성\n\n\nfunction* watchAddEpisode() {\n  yield takeLatest(ADD_EPISODE_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeData => {\n        return axios.post(`/episode`, episodeData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_EPISODE_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 추천\n\n\nfunction* watchAddRecommend() {\n  yield takeLatest(ADD_RECOMMEND_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeId => {\n        return axios.post(`/episode/${episodeId}`, {}, {\n          withCredentials: true\n        });\n      }, action.id);\n      yield put({\n        type: ADD_RECOMMEND_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_RECOMMEND_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 수정\n\n\nfunction* watchUpdateEpisode() {\n  yield takeLatest(UPDATE_EPISODE_REQUEST, function* (action) {\n    try {\n      yield call(updateData => {\n        return axios.patch(`/episode/${updateData.id}`, updateData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_EPISODE_SUCCESS\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 삭제\n\n\nfunction* watchDeleteEpisode() {\n  yield takeLatest(DELETE_EPISODE_REQUEST, function* (action) {\n    try {\n      yield call(episodeId => {\n        return axios.delete(`/episode/${episodeId}`, {\n          withCredentials: true\n        });\n      }, action.id);\n      yield put({\n        type: DELETE_EPISODE_SUCCESS\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 작성\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, function* (action) {\n    try {\n      const result = yield call(commentData => {\n        return axios.post(`/episode/comment`, commentData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 수정\n\n\nfunction* watchUpdateComment() {\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\n    try {\n      const result = yield call(updateCommentData => {\n        return axios.patch(`/episode/comment`, updateCommentData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 삭제\n\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\n    try {\n      const result = yield call(commentId => {\n        return axios.delete(`/episode/comment/${commentId}`, {\n          withCredentials: true\n        });\n      }, action.commentId);\n      yield put({\n        type: DELETE_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* episodeSaga() {\n  yield all([fork(watchLoadEpisode), fork(watchAddEpisode), fork(watchAddRecommend), fork(watchUpdateEpisode), fork(watchDeleteEpisode), fork(watchAddComment), fork(watchUpdateComment), fork(watchDeleteComment)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","ADD_EPISODE_REQUEST","ADD_EPISODE_SUCCESS","ADD_EPISODE_FAILURE","ADD_RECOMMEND_REQUEST","ADD_RECOMMEND_SUCCESS","ADD_RECOMMEND_FAILURE","UPDATE_EPISODE_REQUEST","UPDATE_EPISODE_SUCCESS","UPDATE_EPISODE_FAILURE","DELETE_EPISODE_REQUEST","DELETE_EPISODE_SUCCESS","DELETE_EPISODE_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","watchLoadEpisode","action","result","episodeId","get","id","type","data","e","console","log","error","watchAddEpisode","episodeData","post","withCredentials","watchAddRecommend","watchUpdateEpisode","updateData","patch","watchDeleteEpisode","delete","watchAddComment","commentData","watchUpdateComment","updateComment","updateCommentData","watchDeleteComment","deleteBoard","commentId","episodeSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n  ADD_EPISODE_REQUEST,\r\n  ADD_EPISODE_SUCCESS,\r\n  ADD_EPISODE_FAILURE,\r\n  ADD_RECOMMEND_REQUEST,\r\n  ADD_RECOMMEND_SUCCESS,\r\n  ADD_RECOMMEND_FAILURE,\r\n  UPDATE_EPISODE_REQUEST,\r\n  UPDATE_EPISODE_SUCCESS,\r\n  UPDATE_EPISODE_FAILURE,\r\n  DELETE_EPISODE_REQUEST,\r\n  DELETE_EPISODE_SUCCESS,\r\n  DELETE_EPISODE_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  UPDATE_COMMENT_REQUEST,\r\n  UPDATE_COMMENT_SUCCESS,\r\n  UPDATE_COMMENT_FAILURE,\r\n  DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n} from '../reducers/episode';\r\n\r\n// 글 조회\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 글 작성\r\nfunction* watchAddEpisode() {\r\n  yield takeLatest(ADD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeData => {\r\n        return axios.post(`/episode`, episodeData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 추천\r\nfunction* watchAddRecommend() {\r\n  yield takeLatest(ADD_RECOMMEND_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.post(\r\n          `/episode/${episodeId}`,\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        );\r\n      }, action.id);\r\n      yield put({\r\n        type: ADD_RECOMMEND_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_RECOMMEND_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 수정\r\nfunction* watchUpdateEpisode() {\r\n  yield takeLatest(UPDATE_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      yield call(updateData => {\r\n        return axios.patch(`/episode/${updateData.id}`, updateData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_EPISODE_SUCCESS,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 삭제\r\nfunction* watchDeleteEpisode() {\r\n  yield takeLatest(DELETE_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      yield call(episodeId => {\r\n        return axios.delete(`/episode/${episodeId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.id);\r\n      yield put({\r\n        type: DELETE_EPISODE_SUCCESS,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 작성\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(commentData => {\r\n        return axios.post(`/episode/comment`, commentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 수정\r\nfunction* watchUpdateComment() {\r\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\r\n    try {\r\n      const result = yield call(updateCommentData => {\r\n        return axios.patch(`/episode/comment`, updateCommentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 삭제\r\nfunction* watchDeleteComment() {\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(commentId => {\r\n        return axios.delete(`/episode/comment/${commentId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.commentId);\r\n      yield put({\r\n        type: DELETE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([\r\n    fork(watchLoadEpisode),\r\n    fork(watchAddEpisode),\r\n    fork(watchAddRecommend),\r\n    fork(watchUpdateEpisode),\r\n    fork(watchDeleteEpisode),\r\n    fork(watchAddComment),\r\n    fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}