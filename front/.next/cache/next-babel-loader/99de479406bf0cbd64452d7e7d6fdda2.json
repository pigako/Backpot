{"ast":null,"code":"import produce from 'immer';\nexport const initalState = {\n  episode: null,\n  isAddingEpisode: false,\n  isAddedEpisode: false,\n  isRecommending: false,\n  isUpdatingEpisode: false,\n  isUpdatedEpisode: false,\n  isDeletingEpisode: false,\n  isDeletedEpisode: false,\n  isAddingComment: false,\n  commentAdded: false,\n  isUpdatingComment: false\n};\nexport const LOAD_EPISODE_REQUEST = `LOAD_EPISODE_REQUEST`;\nexport const LOAD_EPISODE_SUCCESS = `LOAD_EPISODE_SUCCESS`;\nexport const LOAD_EPISODE_FAILURE = `LOAD_EPISODE_FAILURE`;\nexport const ADD_EPISODE_REQUEST = `ADD_EPISODE_REQUEST`;\nexport const ADD_EPISODE_SUCCESS = `ADD_EPISODE_SUCCESS`;\nexport const ADD_EPISODE_FAILURE = `ADD_EPISODE_FAILURE`;\nexport const CHANGE_ADDEDEPISODE = `CHANGE_ADDEDEPISODE`;\nexport const ADD_RECOMMEND_REQUEST = `ADD_RECOMMEND_REQUEST`;\nexport const ADD_RECOMMEND_SUCCESS = `ADD_RECOMMEND_SUCCESS`;\nexport const ADD_RECOMMEND_FAILURE = `ADD_RECOMMEND_FAILURE`;\nexport const UPDATE_EPISODE_REQUEST = `UPDATE_EPISODE_REQUEST`;\nexport const UPDATE_EPISODE_SUCCESS = `UPDATE_EPISODE_SUCCESS`;\nexport const UPDATE_EPISODE_FAILURE = `UPDATE_EPISODE_FAILURE`;\nexport const CHANGE_UPDATEDEPISODE = `CHANGE_UPDATEDEPISODE`;\nexport const DELETE_EPISODE_REQUEST = `DELETE_EPISODE_REQUEST`;\nexport const DELETE_EPISODE_SUCCESS = `DELETE_EPISODE_SUCCESS`;\nexport const DELETE_EPISODE_FAILURE = `DELETE_EPISODE_FAILURE`;\nexport const CHANGE_DELETEDEPISODE = `CHANGE_DELETEDEPISODE`;\nexport const ADD_COMMENT_REQUEST = `ADD_COMMENT_REQUEST`;\nexport const ADD_COMMENT_SUCCESS = `ADD_COMMENT_SUCCESS`;\nexport const ADD_COMMENT_FAILURE = `ADD_COMMENT_FAILURE`;\nexport const UPDATE_COMMENT_REQUEST = `UPDATE_COMMENT_REQUEST`;\nexport const UPDATE_COMMENT_SUCCESS = `UPDATE_COMMENT_SUCCESS`;\nexport const UPDATE_COMMENT_FAILURE = `UPDATE_COMMENT_FAILURE`;\nexport const DELETE_COMMENT_REQUEST = `DELETE_COMMENT_REQUEST`;\nexport const DELETE_COMMENT_SUCCESS = `DELETE_COMMENT_SUCCESS`;\nexport const DELETE_COMMENT_FAILURE = `DELETE_COMMENT_FAILURE`;\n\nconst reducer = (state = initalState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_EPISODE_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_EPISODE_SUCCESS:\n        {\n          draft.episode = action.data;\n          break;\n        }\n\n      case LOAD_EPISODE_FAILURE:\n        {\n          break;\n        }\n\n      case ADD_EPISODE_REQUEST:\n        {\n          draft.isAddingEpisode = true;\n          draft.isAddedEpisode = false;\n          break;\n        }\n\n      case ADD_EPISODE_SUCCESS:\n        {\n          draft.isAddingEpisode = false;\n          draft.isAddedEpisode = true;\n          break;\n        }\n\n      case ADD_EPISODE_FAILURE:\n        {\n          break;\n        }\n\n      case CHANGE_ADDEDEPISODE:\n        {\n          draft.isAddedEpisode = false;\n          break;\n        }\n\n      case ADD_RECOMMEND_REQUEST:\n        {\n          draft.isRecommending = true;\n          break;\n        }\n\n      case ADD_RECOMMEND_SUCCESS:\n        {\n          draft.isRecommending = false;\n          draft.episode.recommends = action.data;\n          break;\n        }\n\n      case ADD_RECOMMEND_FAILURE:\n        {\n          break;\n        }\n\n      case UPDATE_EPISODE_REQUEST:\n        {\n          draft.isUpdatedEpisode = false;\n          draft.isUpdatingEpisode = true;\n          break;\n        }\n\n      case UPDATE_EPISODE_SUCCESS:\n        {\n          draft.isUpdatedEpisode = true;\n          draft.isUpdatingEpisode = false;\n          break;\n        }\n\n      case UPDATE_EPISODE_FAILURE:\n        {\n          break;\n        }\n\n      case CHANGE_UPDATEDEPISODE:\n        {\n          draft.isUpdatedEpisode = false;\n          break;\n        }\n\n      case DELETE_EPISODE_REQUEST:\n        {\n          draft.isDeletingEpisode = true;\n          draft.isDeletedEpisode = false;\n          break;\n        }\n\n      case DELETE_EPISODE_SUCCESS:\n        {\n          draft.isDeletingEpisode = false;\n          draft.isDeletedEpisode = true;\n          break;\n        }\n\n      case DELETE_EPISODE_FAILURE:\n        {\n          break;\n        }\n\n      case CHANGE_DELETEDEPISODE:\n        {\n          draft.isDeletedEpisode = false;\n          break;\n        }\n      // 댓글 작성\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.isAddingComment = true;\n          draft.commentAdded = false;\n          break;\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          draft.episode.Episode_Comments.push(action.data);\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          break;\n        }\n      // 댓글 수정\n\n      case UPDATE_COMMENT_REQUEST:\n        {\n          draft.isUpdatingBoard = true;\n          break;\n        }\n\n      case UPDATE_COMMENT_SUCCESS:\n        {\n          draft.isUpdatingBoard = false;\n          const commentIndex = draft.episode.Episode_Comments.findIndex(v => v.id === action.data.id);\n          draft.episode.Episode_Comments[commentIndex].content = action.data.content;\n          break;\n        }\n\n      case UPDATE_COMMENT_FAILURE:\n        {\n          break;\n        }\n      // 댓글 삭제\n\n      case DELETE_COMMENT_REQUEST:\n        {\n          break;\n        }\n\n      case DELETE_COMMENT_SUCCESS:\n        {\n          const commentIndex = draft.episode.Episode_Comments.findIndex(v => v.id === action.data.id);\n          draft.episode.Episode_Comments.splice(commentIndex, 1);\n          break;\n        }\n\n      case DELETE_COMMENT_FAILURE:\n        {\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Document/Backpot/front/reducers/episode.js"],"names":["produce","initalState","episode","isAddingEpisode","isAddedEpisode","isRecommending","isUpdatingEpisode","isUpdatedEpisode","isDeletingEpisode","isDeletedEpisode","isAddingComment","commentAdded","isUpdatingComment","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","ADD_EPISODE_REQUEST","ADD_EPISODE_SUCCESS","ADD_EPISODE_FAILURE","CHANGE_ADDEDEPISODE","ADD_RECOMMEND_REQUEST","ADD_RECOMMEND_SUCCESS","ADD_RECOMMEND_FAILURE","UPDATE_EPISODE_REQUEST","UPDATE_EPISODE_SUCCESS","UPDATE_EPISODE_FAILURE","CHANGE_UPDATEDEPISODE","DELETE_EPISODE_REQUEST","DELETE_EPISODE_SUCCESS","DELETE_EPISODE_FAILURE","CHANGE_DELETEDEPISODE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","reducer","state","action","draft","type","data","recommends","Episode_Comments","push","isUpdatingBoard","commentIndex","findIndex","v","id","content","splice"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initalState = {\r\n  episode: null,\r\n  isAddingEpisode: false,\r\n  isAddedEpisode: false,\r\n  isRecommending: false,\r\n  isUpdatingEpisode: false,\r\n  isUpdatedEpisode: false,\r\n  isDeletingEpisode: false,\r\n  isDeletedEpisode: false,\r\n  isAddingComment: false,\r\n  commentAdded: false,\r\n  isUpdatingComment: false,\r\n};\r\n\r\nexport const LOAD_EPISODE_REQUEST = `LOAD_EPISODE_REQUEST`;\r\nexport const LOAD_EPISODE_SUCCESS = `LOAD_EPISODE_SUCCESS`;\r\nexport const LOAD_EPISODE_FAILURE = `LOAD_EPISODE_FAILURE`;\r\n\r\nexport const ADD_EPISODE_REQUEST = `ADD_EPISODE_REQUEST`;\r\nexport const ADD_EPISODE_SUCCESS = `ADD_EPISODE_SUCCESS`;\r\nexport const ADD_EPISODE_FAILURE = `ADD_EPISODE_FAILURE`;\r\n\r\nexport const CHANGE_ADDEDEPISODE = `CHANGE_ADDEDEPISODE`;\r\n\r\nexport const ADD_RECOMMEND_REQUEST = `ADD_RECOMMEND_REQUEST`;\r\nexport const ADD_RECOMMEND_SUCCESS = `ADD_RECOMMEND_SUCCESS`;\r\nexport const ADD_RECOMMEND_FAILURE = `ADD_RECOMMEND_FAILURE`;\r\n\r\nexport const UPDATE_EPISODE_REQUEST = `UPDATE_EPISODE_REQUEST`;\r\nexport const UPDATE_EPISODE_SUCCESS = `UPDATE_EPISODE_SUCCESS`;\r\nexport const UPDATE_EPISODE_FAILURE = `UPDATE_EPISODE_FAILURE`;\r\n\r\nexport const CHANGE_UPDATEDEPISODE = `CHANGE_UPDATEDEPISODE`;\r\n\r\nexport const DELETE_EPISODE_REQUEST = `DELETE_EPISODE_REQUEST`;\r\nexport const DELETE_EPISODE_SUCCESS = `DELETE_EPISODE_SUCCESS`;\r\nexport const DELETE_EPISODE_FAILURE = `DELETE_EPISODE_FAILURE`;\r\n\r\nexport const CHANGE_DELETEDEPISODE = `CHANGE_DELETEDEPISODE`;\r\n\r\nexport const ADD_COMMENT_REQUEST = `ADD_COMMENT_REQUEST`;\r\nexport const ADD_COMMENT_SUCCESS = `ADD_COMMENT_SUCCESS`;\r\nexport const ADD_COMMENT_FAILURE = `ADD_COMMENT_FAILURE`;\r\n\r\nexport const UPDATE_COMMENT_REQUEST = `UPDATE_COMMENT_REQUEST`;\r\nexport const UPDATE_COMMENT_SUCCESS = `UPDATE_COMMENT_SUCCESS`;\r\nexport const UPDATE_COMMENT_FAILURE = `UPDATE_COMMENT_FAILURE`;\r\n\r\nexport const DELETE_COMMENT_REQUEST = `DELETE_COMMENT_REQUEST`;\r\nexport const DELETE_COMMENT_SUCCESS = `DELETE_COMMENT_SUCCESS`;\r\nexport const DELETE_COMMENT_FAILURE = `DELETE_COMMENT_FAILURE`;\r\n\r\nconst reducer = (state = initalState, action) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      case LOAD_EPISODE_REQUEST: {\r\n        break;\r\n      }\r\n      case LOAD_EPISODE_SUCCESS: {\r\n        draft.episode = action.data;\r\n        break;\r\n      }\r\n      case LOAD_EPISODE_FAILURE: {\r\n        break;\r\n      }\r\n      case ADD_EPISODE_REQUEST: {\r\n        draft.isAddingEpisode = true;\r\n        draft.isAddedEpisode = false;\r\n        break;\r\n      }\r\n      case ADD_EPISODE_SUCCESS: {\r\n        draft.isAddingEpisode = false;\r\n        draft.isAddedEpisode = true;\r\n        break;\r\n      }\r\n      case ADD_EPISODE_FAILURE: {\r\n        break;\r\n      }\r\n      case CHANGE_ADDEDEPISODE: {\r\n        draft.isAddedEpisode = false;\r\n        break;\r\n      }\r\n      case ADD_RECOMMEND_REQUEST: {\r\n        draft.isRecommending = true;\r\n        break;\r\n      }\r\n      case ADD_RECOMMEND_SUCCESS: {\r\n        draft.isRecommending = false;\r\n        draft.episode.recommends = action.data;\r\n        break;\r\n      }\r\n      case ADD_RECOMMEND_FAILURE: {\r\n        break;\r\n      }\r\n      case UPDATE_EPISODE_REQUEST: {\r\n        draft.isUpdatedEpisode = false;\r\n        draft.isUpdatingEpisode = true;\r\n        break;\r\n      }\r\n      case UPDATE_EPISODE_SUCCESS: {\r\n        draft.isUpdatedEpisode = true;\r\n        draft.isUpdatingEpisode = false;\r\n        break;\r\n      }\r\n      case UPDATE_EPISODE_FAILURE: {\r\n        break;\r\n      }\r\n      case CHANGE_UPDATEDEPISODE: {\r\n        draft.isUpdatedEpisode = false;\r\n        break;\r\n      }\r\n      case DELETE_EPISODE_REQUEST: {\r\n        draft.isDeletingEpisode = true;\r\n        draft.isDeletedEpisode = false;\r\n        break;\r\n      }\r\n      case DELETE_EPISODE_SUCCESS: {\r\n        draft.isDeletingEpisode = false;\r\n        draft.isDeletedEpisode = true;\r\n        break;\r\n      }\r\n      case DELETE_EPISODE_FAILURE: {\r\n        break;\r\n      }\r\n      case CHANGE_DELETEDEPISODE: {\r\n        draft.isDeletedEpisode = false;\r\n        break;\r\n      }\r\n      // 댓글 작성\r\n      case ADD_COMMENT_REQUEST: {\r\n        draft.isAddingComment = true;\r\n        draft.commentAdded = false;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_SUCCESS: {\r\n        draft.isAddingComment = false;\r\n        draft.commentAdded = true;\r\n        draft.episode.Episode_Comments.push(action.data);\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE: {\r\n        break;\r\n      }\r\n      // 댓글 수정\r\n      case UPDATE_COMMENT_REQUEST: {\r\n        draft.isUpdatingBoard = true;\r\n        break;\r\n      }\r\n      case UPDATE_COMMENT_SUCCESS: {\r\n        draft.isUpdatingBoard = false;\r\n        const commentIndex = draft.episode.Episode_Comments.findIndex(\r\n          v => v.id === action.data.id,\r\n        );\r\n        draft.episode.Episode_Comments[commentIndex].content =\r\n          action.data.content;\r\n        break;\r\n      }\r\n      case UPDATE_COMMENT_FAILURE: {\r\n        break;\r\n      }\r\n      // 댓글 삭제\r\n      case DELETE_COMMENT_REQUEST: {\r\n        break;\r\n      }\r\n      case DELETE_COMMENT_SUCCESS: {\r\n        const commentIndex = draft.episode.Episode_Comments.findIndex(\r\n          v => v.id === action.data.id,\r\n        );\r\n        draft.episode.Episode_Comments.splice(commentIndex, 1);\r\n        break;\r\n      }\r\n      case DELETE_COMMENT_FAILURE: {\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}