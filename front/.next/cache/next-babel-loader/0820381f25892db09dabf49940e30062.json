{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, LOAD_BOARD_REQUEST, LOAD_BOARD_SUCCESS, LOAD_BOARD_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_SUCCESS, ADD_BOARD_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_BOARD_REQUEST, DELETE_BOARD_SUCCESS, DELETE_BOARD_FAILURE, UPDATE_BOARD_REQUEST, UPDATE_BOARD_SUCCESS, UPDATE_BOARD_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, UPDATE_COMMENT_REQUEST, UPDATE_COMMENT_SUCCESS, UPDATE_COMMENT_FAILURE } from '../reducers/board'; // 전체 게시글 가져오기\n\nfunction* watchLoadBords() {\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\n    try {\n      const result = yield call((lastId = 0, limit = 30) => {\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOARDS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOARDS_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 가져오기\n\n\nfunction* watchLoadBoard() {\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\n    try {\n      const result = yield call(boardId => {\n        return axios.get(`/board/${boardId}`);\n      }, action.boardId);\n      yield put({\n        type: LOAD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      put({\n        type: LOAD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 추가하기\n\n\nfunction* watchAddBoard() {\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\n    try {\n      const result = yield call(boardData => {\n        return axios.post(`/board`, boardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 수정\n\n\nfunction* watchUpdateBoard() {\n  yield takeLatest(UPDATE_BOARD_REQUEST, function* updateBoard(action) {\n    try {\n      const result = yield call(updateBoardData => {\n        return axios.patch(`/board`, updateBoardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 삭제\n\n\nfunction* watchDeleteBoard() {\n  yield takeLatest(DELETE_BOARD_REQUEST, function* deleteBoard(action) {\n    try {\n      const result = yield call(boardId => {\n        return axios.delete(`/board/${boardId}`, {\n          withCredentials: true\n        });\n      }, action.boardId);\n      yield put({\n        type: DELETE_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 추가\n\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, function* addComment(action) {\n    try {\n      const result = yield call(boardData => {\n        return axios.post(`/board/comment`, boardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 수정\n\n\nfunction* watchUpdateComment() {\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\n    try {\n      const result = yield call(updateCommentData => {\n        return axios.patch(`/board/comment`, updateCommentData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: UPDATE_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: UPDATE_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 댓글 삭제\n\n\nfunction* watchDeleteComment() {\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\n    try {\n      const result = yield call(commentId => {\n        return axios.delete(`/board/comment/${commentId}`, {\n          withCredentials: true\n        });\n      }, action.commentId);\n      yield put({\n        type: DELETE_COMMENT_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: DELETE_COMMENT_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBords), fork(watchLoadBoard), fork(watchAddBoard), fork(watchUpdateBoard), fork(watchDeleteBoard), fork(watchAddComment), fork(watchUpdateComment), fork(watchDeleteComment)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","LOAD_BOARD_REQUEST","LOAD_BOARD_SUCCESS","LOAD_BOARD_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_SUCCESS","ADD_BOARD_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","DELETE_BOARD_REQUEST","DELETE_BOARD_SUCCESS","DELETE_BOARD_FAILURE","UPDATE_BOARD_REQUEST","UPDATE_BOARD_SUCCESS","UPDATE_BOARD_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_FAILURE","watchLoadBords","loadBoards","action","result","lastId","limit","get","type","data","e","console","log","error","watchLoadBoard","loadBoard","boardId","watchAddBoard","addBoard","boardData","post","withCredentials","watchUpdateBoard","updateBoard","updateBoardData","patch","watchDeleteBoard","deleteBoard","delete","watchAddComment","addComment","watchUpdateComment","updateComment","updateCommentData","watchDeleteComment","commentId","bookSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  LOAD_BOARD_REQUEST,\r\n  LOAD_BOARD_SUCCESS,\r\n  LOAD_BOARD_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n  ADD_BOARD_FAILURE,\r\n  DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_SUCCESS,\r\n  DELETE_COMMENT_FAILURE,\r\n  DELETE_BOARD_REQUEST,\r\n  DELETE_BOARD_SUCCESS,\r\n  DELETE_BOARD_FAILURE,\r\n  UPDATE_BOARD_REQUEST,\r\n  UPDATE_BOARD_SUCCESS,\r\n  UPDATE_BOARD_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  UPDATE_COMMENT_REQUEST,\r\n  UPDATE_COMMENT_SUCCESS,\r\n  UPDATE_COMMENT_FAILURE,\r\n} from '../reducers/board';\r\n\r\n// 전체 게시글 가져오기\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 가져오기\r\nfunction* watchLoadBoard() {\r\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.get(`/board/${boardId}`);\r\n      }, action.boardId);\r\n      yield put({\r\n        type: LOAD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      put({\r\n        type: LOAD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 추가하기\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 수정\r\nfunction* watchUpdateBoard() {\r\n  yield takeLatest(UPDATE_BOARD_REQUEST, function* updateBoard(action) {\r\n    try {\r\n      const result = yield call(updateBoardData => {\r\n        return axios.patch(`/board`, updateBoardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 삭제\r\nfunction* watchDeleteBoard() {\r\n  yield takeLatest(DELETE_BOARD_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.delete(`/board/${boardId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.boardId);\r\n      yield put({\r\n        type: DELETE_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 추가\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, function* addComment(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board/comment`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 수정\r\nfunction* watchUpdateComment() {\r\n  yield takeLatest(UPDATE_COMMENT_REQUEST, function* updateComment(action) {\r\n    try {\r\n      const result = yield call(updateCommentData => {\r\n        return axios.patch(`/board/comment`, updateCommentData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: UPDATE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: UPDATE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 댓글 삭제\r\nfunction* watchDeleteComment() {\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, function* deleteBoard(action) {\r\n    try {\r\n      const result = yield call(commentId => {\r\n        return axios.delete(`/board/comment/${commentId}`, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.commentId);\r\n      yield put({\r\n        type: DELETE_COMMENT_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: DELETE_COMMENT_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([\r\n    fork(watchLoadBords),\r\n    fork(watchLoadBoard),\r\n    fork(watchAddBoard),\r\n    fork(watchUpdateBoard),\r\n    fork(watchDeleteBoard),\r\n    fork(watchAddComment),\r\n    fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}