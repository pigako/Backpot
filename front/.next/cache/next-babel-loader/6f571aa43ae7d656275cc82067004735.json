{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE, LOAD_BOARD_REQUEST, LOAD_BOARD_SUCCESS, LOAD_BOARD_FAILURE, ADD_BOARD_REQUEST, ADD_BOARD_SUCCESS, ADD_BOARD_FAILURE } from '../reducers/board'; // 전체 게시글 가져오기\n\nfunction* watchLoadBords() {\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\n    try {\n      const result = yield call((lastId = 0, limit = 30) => {\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOARDS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOARDS_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 가져오기\n\n\nfunction* watchLoadBoard() {\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\n    try {\n      const result = yield call(boardId => {\n        return axios.get(`/board/${boardId}`);\n      }, action.boardId);\n      yield put({\n        type: LOAD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      put({\n        type: LOAD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 추가하기\n\n\nfunction* watchAddBoard() {\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\n    try {\n      const result = yield call(boardData => {\n        return axios.post(`/board`, boardData, {\n          withCredentials: true\n        });\n      }, action.data);\n      yield put({\n        type: ADD_BOARD_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: ADD_BOARD_FAILURE,\n        error: e\n      });\n    }\n  });\n} // 게시글 수정\n// 게시글 삭제\n// 댓글 추가\n// 댓글 수정\n// 댓글 삭제\n\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBords), fork(watchLoadBoard), fork(watchAddBoard), fork(watchUpdateBoard), fork(watchDeleteBoard), fork(watchAddComment), fork(watchUpdateComment), fork(watchDeleteComment)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","LOAD_BOARD_REQUEST","LOAD_BOARD_SUCCESS","LOAD_BOARD_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_SUCCESS","ADD_BOARD_FAILURE","watchLoadBords","loadBoards","action","result","lastId","limit","get","type","data","e","console","log","error","watchLoadBoard","loadBoard","boardId","watchAddBoard","addBoard","boardData","post","withCredentials","bookSaga","watchUpdateBoard","watchDeleteBoard","watchAddComment","watchUpdateComment","watchDeleteComment"],"mappings":"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","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n  LOAD_BOARD_REQUEST,\r\n  LOAD_BOARD_SUCCESS,\r\n  LOAD_BOARD_FAILURE,\r\n  ADD_BOARD_REQUEST,\r\n  ADD_BOARD_SUCCESS,\r\n  ADD_BOARD_FAILURE,\r\n} from '../reducers/board';\r\n\r\n// 전체 게시글 가져오기\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 30) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 가져오기\r\nfunction* watchLoadBoard() {\r\n  yield takeLatest(LOAD_BOARD_REQUEST, function* loadBoard(action) {\r\n    try {\r\n      const result = yield call(boardId => {\r\n        return axios.get(`/board/${boardId}`);\r\n      }, action.boardId);\r\n      yield put({\r\n        type: LOAD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      put({\r\n        type: LOAD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 추가하기\r\nfunction* watchAddBoard() {\r\n  yield takeLatest(ADD_BOARD_REQUEST, function* addBoard(action) {\r\n    try {\r\n      const result = yield call(boardData => {\r\n        return axios.post(`/board`, boardData, {\r\n          withCredentials: true,\r\n        });\r\n      }, action.data);\r\n      yield put({\r\n        type: ADD_BOARD_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: ADD_BOARD_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n// 게시글 수정\r\n// 게시글 삭제\r\n\r\n// 댓글 추가\r\n// 댓글 수정\r\n// 댓글 삭제\r\n\r\nexport default function* bookSaga() {\r\n  yield all([\r\n    fork(watchLoadBords),\r\n    fork(watchLoadBoard),\r\n    fork(watchAddBoard),\r\n    fork(watchUpdateBoard),\r\n    fork(watchDeleteBoard),\r\n    fork(watchAddComment),\r\n    fork(watchUpdateComment),\r\n    fork(watchDeleteComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}