{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadBords),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bookSaga);\n\nimport { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE } from '../reducers/board';\n\nfunction watchLoadBords() {\n  return _regeneratorRuntime.wrap(function watchLoadBords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(1000, LOAD_BOARDS_REQUEST,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(action) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    console.log(\"\\n      -------------------------\\n      -------------------------\\n      -------------------------\\n      ---- watchLoadBoards ----\\n      -------------------------\\n      -------------------------\\n      -------------------------\\n      \");\n                    result = call(function () {\n                      var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n                      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n                      return axios.get(\"/boards?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n                    }, action.lastId);\n                    _context.next = 5;\n                    return put({\n                      type: LOAD_BOARDS_SUCCESS,\n                      data: result.data\n                    });\n\n                  case 5:\n                    _context.next = 12;\n                    break;\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n                    _context.next = 12;\n                    return put({\n                      type: LOAD_BOARDS_FAILURE,\n                      error: _context.t0\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 7]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function bookSaga() {\n  return _regeneratorRuntime.wrap(function bookSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadBords)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["watchLoadBords","bookSaga","all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","action","console","log","result","lastId","limit","get","type","data","error"],"mappings":";;;;yBAQUA,c;;;yBA6BeC,Q;;AArCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,mBAJP;;AAMA,SAAUX,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,QAAQ,CAAC,IAAD,EAAOI,mBAAP;AAAA;AAAA,mCAA4B,iBAAUG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtCC,oBAAAA,OAAO,CAACC,GAAR;AASMC,oBAAAA,MAXgC,GAWvBZ,IAAI,CAAC,YAA4B;AAAA,0BAA3Ba,MAA2B,uEAAlB,CAAkB;AAAA,0BAAfC,KAAe,uEAAP,EAAO;AAC9C,6BAAOT,KAAK,CAACU,GAAN,0BAA4BF,MAA5B,oBAA4CC,KAA5C,EAAP;AACD,qBAFkB,EAEhBL,MAAM,CAACI,MAFS,CAXmB;AAAA;AActC,2BAAMT,GAAG,CAAC;AACRY,sBAAAA,IAAI,EAAET,mBADE;AAERU,sBAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,qBAAD,CAAT;;AAdsC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBtCP,oBAAAA,OAAO,CAACC,GAAR;AAnBsC;AAoBtC,2BAAMP,GAAG,CAAC;AACRY,sBAAAA,IAAI,EAAER,mBADE;AAERU,sBAAAA,KAAK;AAFG,qBAAD,CAAT;;AApBsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA5B,EAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,eAAe,SAAUpB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,cAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n} from '../reducers/board';\r\n\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function*(action) {\r\n    try {\r\n      console.log(`\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      ---- watchLoadBoards ----\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      `);\r\n      const result = call((lastId = 0, limit = 10) => {\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBords)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}