{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOARDS_REQUEST, LOAD_BOARDS_SUCCESS, LOAD_BOARDS_FAILURE } from '../reducers/board';\n\nfunction* watchLoadBords() {\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\n    try {\n      console.log(`\n      -------------------------\n      -------------------------\n      -------------------------\n      ---- watchLoadBoards ----\n      -------------------------\n      -------------------------\n      -------------------------\n      `);\n      const result = yield call((lastId = 0, limit = 10) => {\n        console.log(`\n      -------------------------\n      -------------------------\n      -------------------------\n      ---- watchLoadResult ----\n      -------------------------\n      -------------------------\n      -------------------------\n      `);\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOARDS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOARDS_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBords)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/board.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","watchLoadBords","loadBoards","action","console","log","result","lastId","limit","get","type","data","e","error","bookSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,mBAJP;;AAMA,UAAUC,cAAV,GAA2B;AACzB,QAAMP,QAAQ,CAAC,IAAD,EAAOI,mBAAP,EAA4B,UAAUI,UAAV,CAAqBC,MAArB,EAA6B;AACrE,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAa;;;;;;;;OAAb;AASA,YAAMC,MAAM,GAAG,MAAMd,IAAI,CAAC,CAACe,MAAM,GAAG,CAAV,EAAaC,KAAK,GAAG,EAArB,KAA4B;AACpDJ,QAAAA,OAAO,CAACC,GAAR,CAAa;;;;;;;;OAAb;AASA,eAAOR,KAAK,CAACY,GAAN,CAAW,kBAAiBF,MAAO,UAASC,KAAM,EAAlD,CAAP;AACD,OAXwB,EAWtBL,MAAM,CAACI,MAXe,CAAzB;AAYA,YAAMX,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEX,mBADE;AAERY,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KA1BD,CA0BE,OAAOC,CAAP,EAAU;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;AACA,YAAMhB,GAAG,CAAC;AACRc,QAAAA,IAAI,EAAEV,mBADE;AAERa,QAAAA,KAAK,EAAED;AAFC,OAAD,CAAT;AAID;AACF,GAlCa,CAAd;AAmCD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACE,IAAI,CAACQ,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOARDS_REQUEST,\r\n  LOAD_BOARDS_SUCCESS,\r\n  LOAD_BOARDS_FAILURE,\r\n} from '../reducers/board';\r\n\r\nfunction* watchLoadBords() {\r\n  yield throttle(1000, LOAD_BOARDS_REQUEST, function* loadBoards(action) {\r\n    try {\r\n      console.log(`\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      ---- watchLoadBoards ----\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      `);\r\n      const result = yield call((lastId = 0, limit = 10) => {\r\n        console.log(`\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      ---- watchLoadResult ----\r\n      -------------------------\r\n      -------------------------\r\n      -------------------------\r\n      `);\r\n        return axios.get(`/boards?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOARDS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOARDS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBords)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}