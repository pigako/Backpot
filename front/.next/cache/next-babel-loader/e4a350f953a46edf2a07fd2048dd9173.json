{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_EPISODE_REQUEST, LOAD_EPISODE_SUCCESS, LOAD_EPISODE_FAILURE } from '../reducers/episode';\n\nfunction* watchLoadEpisode() {\n  yield takeLatest(LOAD_EPISODE_REQUEST, function* (action) {\n    try {\n      const result = yield call(episodeId => {\n        return axios.get(`/book/episode/${episodeId}`);\n      }, action.id);\n      yield put({\n        type: LOAD_EPISODE_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_EPISODE_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* episodeSaga() {\n  yield all([fork(watchLoadEpisode)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/episode.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_EPISODE_REQUEST","LOAD_EPISODE_SUCCESS","LOAD_EPISODE_FAILURE","watchLoadEpisode","action","result","episodeId","get","id","type","data","e","console","log","error","episodeSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,qBAJP;;AAMA,UAAUC,gBAAV,GAA6B;AAC3B,QAAMN,UAAU,CAACG,oBAAD,EAAuB,WAAUI,MAAV,EAAkB;AACvD,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMX,IAAI,CAACY,SAAS,IAAI;AACrC,eAAOP,KAAK,CAACQ,GAAN,CAAW,iBAAgBD,SAAU,EAArC,CAAP;AACD,OAFwB,EAEtBF,MAAM,CAACI,EAFe,CAAzB;AAGA,YAAMV,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAER,oBADE;AAERS,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMb,GAAG,CAAC;AACRW,QAAAA,IAAI,EAAEP,oBADE;AAERY,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAhBe,CAAhB;AAiBD;;AAED,eAAe,UAAUI,WAAV,GAAwB;AACrC,QAAMtB,GAAG,CAAC,CAACE,IAAI,CAACQ,gBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_EPISODE_REQUEST,\r\n  LOAD_EPISODE_SUCCESS,\r\n  LOAD_EPISODE_FAILURE,\r\n} from '../reducers/episode';\r\n\r\nfunction* watchLoadEpisode() {\r\n  yield takeLatest(LOAD_EPISODE_REQUEST, function*(action) {\r\n    try {\r\n      const result = yield call(episodeId => {\r\n        return axios.get(`/book/episode/${episodeId}`);\r\n      }, action.id);\r\n      yield put({\r\n        type: LOAD_EPISODE_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_EPISODE_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* episodeSaga() {\r\n  yield all([fork(watchLoadEpisode)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}