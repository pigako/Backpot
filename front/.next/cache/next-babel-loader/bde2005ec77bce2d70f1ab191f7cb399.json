{"ast":null,"code":"import produce from 'immer';\nexport var initalState = {\n  boards: [],\n  board: null,\n  isAddingBoard: false,\n  boardAdded: false\n};\nexport var LOAD_BOARDS_REQUEST = \"LOAD_BOARDS_REQUEST\";\nexport var LOAD_BOARDS_SUCCESS = \"LOAD_BOARDS_SUCCESS\";\nexport var LOAD_BOARDS_FAILURE = \"LOAD_BOARDS_FAILURE\";\nexport var LOAD_BOARD_REQUEST = \"LOAD_BOARD_REQUEST\";\nexport var LOAD_BOARD_SUCCESS = \"LOAD_BOARD_SUCCESS\";\nexport var LOAD_BOARD_FAILURE = \"LOAD_BOARD_FAILURE\";\nexport var ADD_BOARD_REQUEST = \"ADD_BOARD_REQUEST\";\nexport var ADD_BOARD_SUCCESS = \"ADD_BOARD_SUCCESS\";\nexport var ADD_BOARD_FAILURE = \"ADD_BOARD_FAILURE\";\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_BOARDS_REQUEST:\n        draft.boards = !action.lastId ? [] : draft.boards;\n        draft.hasMoreBoards = action.lastId ? draft.hasMoreBoards : true;\n        break;\n\n      case LOAD_BOARDS_SUCCESS:\n        draft.boards = draft.boards.concat(action.data);\n        draft.hasMoreBoards = action.data.length === 30;\n        break;\n\n      case LOAD_BOARDS_FAILURE:\n        break;\n\n      case LOAD_BOARDS_REQUEST:\n        draft.board = null;\n        break;\n\n      case LOAD_BOARDS_SUCCESS:\n        draft.board = action.data;\n        break;\n\n      case LOAD_BOARDS_FAILURE:\n        break;\n\n      case ADD_BOARD_REQUEST:\n        draft.isAddingBoard = true;\n        draft.boardAdded = false;\n        break;\n\n      case ADD_BOARD_SUCCESS:\n        draft.isAddingBoard = false;\n        draft.boardAdded = true;\n        draft.boards.unshift(action.data);\n        break;\n\n      case ADD_BOARD_FAILURE:\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Document/Backpot/front/reducers/board.js"],"names":["produce","initalState","boards","board","isAddingBoard","boardAdded","LOAD_BOARDS_REQUEST","LOAD_BOARDS_SUCCESS","LOAD_BOARDS_FAILURE","LOAD_BOARD_REQUEST","LOAD_BOARD_SUCCESS","LOAD_BOARD_FAILURE","ADD_BOARD_REQUEST","ADD_BOARD_SUCCESS","ADD_BOARD_FAILURE","reducer","state","action","draft","type","lastId","hasMoreBoards","concat","data","length","unshift"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,EADiB;AAEzBC,EAAAA,KAAK,EAAE,IAFkB;AAGzBC,EAAAA,aAAa,EAAE,KAHU;AAIzBC,EAAAA,UAAU,EAAE;AAJa,CAApB;AAOP,OAAO,IAAMC,mBAAmB,wBAAzB;AACP,OAAO,IAAMC,mBAAmB,wBAAzB;AACP,OAAO,IAAMC,mBAAmB,wBAAzB;AAEP,OAAO,IAAMC,kBAAkB,uBAAxB;AACP,OAAO,IAAMC,kBAAkB,uBAAxB;AACP,OAAO,IAAMC,kBAAkB,uBAAxB;AAEP,OAAO,IAAMC,iBAAiB,sBAAvB;AACP,OAAO,IAAMC,iBAAiB,sBAAvB;AACP,OAAO,IAAMC,iBAAiB,sBAAvB;;AAEP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBf,WAAwB;AAAA,MAAXgB,MAAW;AAC/C,SAAOjB,OAAO,CAACgB,KAAD,EAAQ,UAAAE,KAAK,EAAI;AAC7B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKb,mBAAL;AACEY,QAAAA,KAAK,CAAChB,MAAN,GAAe,CAACe,MAAM,CAACG,MAAR,GAAiB,EAAjB,GAAsBF,KAAK,CAAChB,MAA3C;AACAgB,QAAAA,KAAK,CAACG,aAAN,GAAsBJ,MAAM,CAACG,MAAP,GAAgBF,KAAK,CAACG,aAAtB,GAAsC,IAA5D;AACA;;AACF,WAAKd,mBAAL;AACEW,QAAAA,KAAK,CAAChB,MAAN,GAAegB,KAAK,CAAChB,MAAN,CAAaoB,MAAb,CAAoBL,MAAM,CAACM,IAA3B,CAAf;AACAL,QAAAA,KAAK,CAACG,aAAN,GAAsBJ,MAAM,CAACM,IAAP,CAAYC,MAAZ,KAAuB,EAA7C;AACA;;AACF,WAAKhB,mBAAL;AACE;;AACF,WAAKF,mBAAL;AACEY,QAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACA;;AACF,WAAKI,mBAAL;AACEW,QAAAA,KAAK,CAACf,KAAN,GAAcc,MAAM,CAACM,IAArB;AACA;;AACF,WAAKf,mBAAL;AACE;;AACF,WAAKI,iBAAL;AACEM,QAAAA,KAAK,CAACd,aAAN,GAAsB,IAAtB;AACAc,QAAAA,KAAK,CAACb,UAAN,GAAmB,KAAnB;AACA;;AACF,WAAKQ,iBAAL;AACEK,QAAAA,KAAK,CAACd,aAAN,GAAsB,KAAtB;AACAc,QAAAA,KAAK,CAACb,UAAN,GAAmB,IAAnB;AACAa,QAAAA,KAAK,CAAChB,MAAN,CAAauB,OAAb,CAAqBR,MAAM,CAACM,IAA5B;AACA;;AACF,WAAKT,iBAAL;AACE;;AACF;AACE;AA/BJ;AAiCD,GAlCa,CAAd;AAmCD,CApCD;;AAsCA,eAAeC,OAAf","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initalState = {\r\n  boards: [],\r\n  board: null,\r\n  isAddingBoard: false,\r\n  boardAdded: false,\r\n};\r\n\r\nexport const LOAD_BOARDS_REQUEST = `LOAD_BOARDS_REQUEST`;\r\nexport const LOAD_BOARDS_SUCCESS = `LOAD_BOARDS_SUCCESS`;\r\nexport const LOAD_BOARDS_FAILURE = `LOAD_BOARDS_FAILURE`;\r\n\r\nexport const LOAD_BOARD_REQUEST = `LOAD_BOARD_REQUEST`;\r\nexport const LOAD_BOARD_SUCCESS = `LOAD_BOARD_SUCCESS`;\r\nexport const LOAD_BOARD_FAILURE = `LOAD_BOARD_FAILURE`;\r\n\r\nexport const ADD_BOARD_REQUEST = `ADD_BOARD_REQUEST`;\r\nexport const ADD_BOARD_SUCCESS = `ADD_BOARD_SUCCESS`;\r\nexport const ADD_BOARD_FAILURE = `ADD_BOARD_FAILURE`;\r\n\r\nconst reducer = (state = initalState, action) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      case LOAD_BOARDS_REQUEST:\r\n        draft.boards = !action.lastId ? [] : draft.boards;\r\n        draft.hasMoreBoards = action.lastId ? draft.hasMoreBoards : true;\r\n        break;\r\n      case LOAD_BOARDS_SUCCESS:\r\n        draft.boards = draft.boards.concat(action.data);\r\n        draft.hasMoreBoards = action.data.length === 30;\r\n        break;\r\n      case LOAD_BOARDS_FAILURE:\r\n        break;\r\n      case LOAD_BOARDS_REQUEST:\r\n        draft.board = null;\r\n        break;\r\n      case LOAD_BOARDS_SUCCESS:\r\n        draft.board = action.data;\r\n        break;\r\n      case LOAD_BOARDS_FAILURE:\r\n        break;\r\n      case ADD_BOARD_REQUEST:\r\n        draft.isAddingBoard = true;\r\n        draft.boardAdded = false;\r\n        break;\r\n      case ADD_BOARD_SUCCESS:\r\n        draft.isAddingBoard = false;\r\n        draft.boardAdded = true;\r\n        draft.boards.unshift(action.data);\r\n        break;\r\n      case ADD_BOARD_FAILURE:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}