{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport Button from '../components/designs/Button';\nconst SProfileDiv = styled.div.withConfig({\n  displayName: \"profile__SProfileDiv\",\n  componentId: \"sc-1n71nmh-0\"\n})([\"width:98%;margin-top:10px;\"]);\nconst ProfileTitle = styled.h1.withConfig({\n  displayName: \"profile__ProfileTitle\",\n  componentId: \"sc-1n71nmh-1\"\n})([\"display:inline-block;font-weight:bold;margin-left:10px;width:100%;\"]);\nconst InfoCardWrap = styled.div.withConfig({\n  displayName: \"profile__InfoCardWrap\",\n  componentId: \"sc-1n71nmh-2\"\n})([\"margin-top:2rem;margin-left:1.5rem;border:solid 1px #495057;border-radius:6px;width:70%;\"]);\nconst InfoCardDiv = styled.div.withConfig({\n  displayName: \"profile__InfoCardDiv\",\n  componentId: \"sc-1n71nmh-3\"\n})([\"display:flex;align-items:center;margin:1rem;height:4rem;\"]);\nconst InfoLeftDiv = styled.div.withConfig({\n  displayName: \"profile__InfoLeftDiv\",\n  componentId: \"sc-1n71nmh-4\"\n})([\"flex:1;\"]);\nconst InfoRightDiv = styled.div.withConfig({\n  displayName: \"profile__InfoRightDiv\",\n  componentId: \"sc-1n71nmh-5\"\n})([\"flex:3;display:flex;& > input{width:100%;height:2rem;font-size:1rem;line-height:2rem;padding-left:10px;border:solid 2px #495057;border-radius:4px;transition:0.55s ease;&:hover{border:solid 2px #148cff;}&:focus{border:solid 2px #148cff;}}\"]);\nconst CheckButton = styled(Button).withConfig({\n  displayName: \"profile__CheckButton\",\n  componentId: \"sc-1n71nmh-6\"\n})([\"width:8rem;height:2rem;margin-left:10px;\"]);\nconst ButtonDiv = styled.div.withConfig({\n  displayName: \"profile__ButtonDiv\",\n  componentId: \"sc-1n71nmh-7\"\n})([\"margin:1rem;height:4rem;\"]);\nconst SButton = styled(Button).withConfig({\n  displayName: \"profile__SButton\",\n  componentId: \"sc-1n71nmh-8\"\n})([\"display:block;width:8rem;margin-top:1rem;float:right;\"]);\n\nconst Profile = ({\n  id\n}) => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    userId: '',\n    userPassword: '',\n    userNickname: ''\n  });\n  const {\n    0: checkUserId,\n    1: setCheckUserId\n  } = useState(false);\n  const {\n    0: checkUserNickname,\n    1: setCheckUserNickname\n  } = useState(false);\n  const {\n    userId,\n    userPassword,\n    userNickname\n  } = inputs;\n  const onChangeInputs = useCallback(e => {\n    setInputs(_objectSpread({}, inputs, {\n      [e.target.name]: e.target.value\n    }));\n  }, [inputs]);\n  useEffect(e => {\n    if (!(me && me.id)) {\n      alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\n      Router.push('/');\n      return;\n    }\n\n    if ((me && me.userId) !== id) {\n      alert('잘 못된 접근입니다.');\n      Router.push('/');\n      return;\n    }\n  }, [me && me.userId, id]);\n  const onCheck = useCallback(async e => {\n    if (e.target.name === 'checkUserId') {\n      if (!userId.trim()) {\n        alert('수정 사항이 없습니다.');\n        return;\n      }\n\n      const result = await axios.post(`/user/check`, {\n        type: 'userId',\n        userId\n      });\n\n      if (result.data) {\n        setCheckUserId(true);\n        alert('사용 가능한 아이디입니다.');\n      } else {\n        alert('이미 사용중인 아이디입니다.');\n      }\n    } else if (e.target.name === 'checkUserNickname') {\n      if (!userNickname.trim()) {\n        alert('수정 사항이 없습니다.');\n      }\n\n      const result = await axios.post(`/user/check`, {\n        type: 'userNickname',\n        userNickname\n      });\n\n      if (result.data) {\n        setCheckUserNickname(true);\n        alert('사용 가능한 닉네임입니다.');\n      } else {\n        alert('이미 사용중인 닉네임입니다.');\n      }\n    }\n  }, [userId, userNickname]);\n  const onUpdatePassword = useCallback(e => {}, []);\n  const onUpdateProfile = useCallback(e => {\n    if (!(userId || userPassword || userNickname)) {\n      alert('수정 사항이 없습니다.');\n      return;\n    }\n  }, [userId, userPassword, userNickname]);\n  return __jsx(SProfileDiv, null, __jsx(ProfileTitle, null, me && me.nickname, \" \\uB2D8 \\uD504\\uB85C\\uD544 \\uC218\\uC815\"), __jsx(InfoCardWrap, null, __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uC544\\uC774\\uB514\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userId\",\n    value: userId,\n    placeholder: me && me.userId,\n    onChange: onChangeInputs\n  }), __jsx(CheckButton, {\n    name: \"checkUserId\",\n    onClick: onCheck\n  }, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uBE44\\uBC00\\uBC88\\uD638\")), __jsx(InfoRightDiv, null, __jsx(Button, {\n    size: 'middle',\n    onClick: onUpdatePassword\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"))), __jsx(InfoCardDiv, null, __jsx(InfoLeftDiv, null, __jsx(\"label\", null, \"\\uB2C9\\uB124\\uC784\")), __jsx(InfoRightDiv, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"userNickname\",\n    value: userNickname,\n    placeholder: me && me.nickname,\n    onChange: onChangeInputs\n  }), __jsx(CheckButton, {\n    name: \"checkUserNickname\",\n    onClick: onCheck\n  }, \"\\uC911\\uBCF5\\uD655\\uC778\"))), __jsx(ButtonDiv, null, __jsx(SButton, {\n    onClick: onUpdateProfile\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"))));\n};\n\nProfile.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nProfile.getInitialProps = async context => {\n  const id = context.query.id;\n  return {\n    id\n  };\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/Document/Backpot/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","PropTypes","styled","Router","axios","useSelector","LOAD_USER_REQUEST","Button","SProfileDiv","div","ProfileTitle","h1","InfoCardWrap","InfoCardDiv","InfoLeftDiv","InfoRightDiv","CheckButton","ButtonDiv","SButton","Profile","id","me","state","user","inputs","setInputs","userId","userPassword","userNickname","checkUserId","setCheckUserId","checkUserNickname","setCheckUserNickname","onChangeInputs","e","target","name","value","alert","push","onCheck","trim","result","post","type","data","onUpdatePassword","onUpdateProfile","nickname","propTypes","string","isRequired","getInitialProps","context","query"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Router from 'next/router';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport Button from '../components/designs/Button';\r\n\r\nconst SProfileDiv = styled.div`\r\n  width: 98%;\r\n  margin-top: 10px;\r\n`;\r\nconst ProfileTitle = styled.h1`\r\n  display: inline-block;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n  width: 100%;\r\n`;\r\nconst InfoCardWrap = styled.div`\r\n  margin-top: 2rem;\r\n  margin-left: 1.5rem;\r\n  border: solid 1px #495057;\r\n  border-radius: 6px;\r\n  width: 70%;\r\n`;\r\nconst InfoCardDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\nconst InfoLeftDiv = styled.div`\r\n  flex: 1;\r\n`;\r\nconst InfoRightDiv = styled.div`\r\n  flex: 3;\r\n  display: flex;\r\n  & > input {\r\n    width: 100%;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n    line-height: 2rem;\r\n    padding-left: 10px;\r\n\r\n    border: solid 2px #495057;\r\n    border-radius: 4px;\r\n\r\n    transition: 0.55s ease;\r\n\r\n    & :hover {\r\n      border: solid 2px #148cff;\r\n    }\r\n    & :focus {\r\n      border: solid 2px #148cff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckButton = styled(Button)`\r\n  width: 8rem;\r\n  height: 2rem;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst ButtonDiv = styled.div`\r\n  margin: 1rem;\r\n  height: 4rem;\r\n`;\r\n\r\nconst SButton = styled(Button)`\r\n  display: block;\r\n  width: 8rem;\r\n  margin-top: 1rem;\r\n\r\n  float: right;\r\n`;\r\n\r\nconst Profile = ({ id }) => {\r\n  const { me } = useSelector(state => state.user);\r\n\r\n  const [inputs, setInputs] = useState({\r\n    userId: '',\r\n    userPassword: '',\r\n    userNickname: '',\r\n  });\r\n  const [checkUserId, setCheckUserId] = useState(false);\r\n  const [checkUserNickname, setCheckUserNickname] = useState(false);\r\n\r\n  const { userId, userPassword, userNickname } = inputs;\r\n\r\n  const onChangeInputs = useCallback(\r\n    e => {\r\n      setInputs({\r\n        ...inputs,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    },\r\n    [inputs],\r\n  );\r\n\r\n  useEffect(\r\n    e => {\r\n      if (!(me && me.id)) {\r\n        alert('로그인 하지 않은 사용자는 접근 할 수 없습니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n      if ((me && me.userId) !== id) {\r\n        alert('잘 못된 접근입니다.');\r\n        Router.push('/');\r\n        return;\r\n      }\r\n    },\r\n    [me && me.userId, id],\r\n  );\r\n\r\n  const onCheck = useCallback(\r\n    async e => {\r\n      if (e.target.name === 'checkUserId') {\r\n        if (!userId.trim()) {\r\n          alert('수정 사항이 없습니다.');\r\n          return;\r\n        }\r\n        const result = await axios.post(`/user/check`, {\r\n          type: 'userId',\r\n          userId,\r\n        });\r\n        if (result.data) {\r\n          setCheckUserId(true);\r\n          alert('사용 가능한 아이디입니다.');\r\n        } else {\r\n          alert('이미 사용중인 아이디입니다.');\r\n        }\r\n      } else if (e.target.name === 'checkUserNickname') {\r\n        if (!userNickname.trim()) {\r\n          alert('수정 사항이 없습니다.');\r\n        }\r\n        const result = await axios.post(`/user/check`, {\r\n          type: 'userNickname',\r\n          userNickname,\r\n        });\r\n        if (result.data) {\r\n          setCheckUserNickname(true);\r\n          alert('사용 가능한 닉네임입니다.');\r\n        } else {\r\n          alert('이미 사용중인 닉네임입니다.');\r\n        }\r\n      }\r\n    },\r\n    [userId, userNickname],\r\n  );\r\n\r\n  const onUpdatePassword = useCallback(e => {}, []);\r\n\r\n  const onUpdateProfile = useCallback(\r\n    e => {\r\n      if (!(userId || userPassword || userNickname)) {\r\n        alert('수정 사항이 없습니다.');\r\n        return;\r\n      }\r\n    },\r\n    [userId, userPassword, userNickname],\r\n  );\r\n\r\n  return (\r\n    <SProfileDiv>\r\n      <ProfileTitle>{me && me.nickname} 님 프로필 수정</ProfileTitle>\r\n      <InfoCardWrap>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>아이디</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userId\"\r\n              value={userId}\r\n              placeholder={me && me.userId}\r\n              onChange={onChangeInputs}\r\n            />\r\n            <CheckButton name=\"checkUserId\" onClick={onCheck}>\r\n              중복확인\r\n            </CheckButton>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>비밀번호</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <Button size={'middle'} onClick={onUpdatePassword}>\r\n              비밀번호 변경\r\n            </Button>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <InfoCardDiv>\r\n          <InfoLeftDiv>\r\n            <label>닉네임</label>\r\n          </InfoLeftDiv>\r\n          <InfoRightDiv>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userNickname\"\r\n              value={userNickname}\r\n              placeholder={me && me.nickname}\r\n              onChange={onChangeInputs}\r\n            />\r\n            <CheckButton name=\"checkUserNickname\" onClick={onCheck}>\r\n              중복확인\r\n            </CheckButton>\r\n          </InfoRightDiv>\r\n        </InfoCardDiv>\r\n        <ButtonDiv>\r\n          <SButton onClick={onUpdateProfile}>수정하기</SButton>\r\n        </ButtonDiv>\r\n      </InfoCardWrap>\r\n      {/* <table>\r\n        <tr>\r\n          <td>아이디</td>\r\n          <td>{me && me.userId}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>닉네임</td>\r\n          <td>{me && me.nickname}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>연재한 글 수</td>\r\n          <td>{me && me.Books.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작 수</td>\r\n          <td>{me && me.LikingBook.length}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>선호작가 수</td>\r\n          <td>{me && me.LikingUser.length}</td>\r\n        </tr>\r\n      </table> */}\r\n    </SProfileDiv>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nProfile.getInitialProps = async context => {\r\n  const id = context.query.id;\r\n  return { id };\r\n};\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}