{"ast":null,"code":"import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_BOOKS_REQUEST, LOAD_BOOKS_SUCCESS, LOAD_BOOKS_FAILURE } from '../reducers/book'; // 전체 연재글 가져오기\n\nfunction* watchLoadBooks() {\n  yield throttle(1000, LOAD_BOOKS_REQUEST, function* loadBooks(action) {\n    try {\n      const result = yield call((lastId = 0, limit = 20) => {\n        return axios.get(`/books?lastId=${lastId}&limit=${limit}`);\n      }, action.lastId);\n      yield put({\n        type: LOAD_BOOKS_SUCCESS,\n        data: result.data\n      });\n    } catch (e) {\n      console.log(e);\n      yield put({\n        type: LOAD_BOOKS_FAILURE,\n        error: e\n      });\n    }\n  });\n}\n\nexport default function* bookSaga() {\n  yield all([fork(watchLoadBooks)]);\n}","map":{"version":3,"sources":["C:/Document/Backpot/front/sagas/book.js"],"names":["all","call","fork","throttle","takeLatest","put","axios","LOAD_BOOKS_REQUEST","LOAD_BOOKS_SUCCESS","LOAD_BOOKS_FAILURE","watchLoadBooks","loadBooks","action","result","lastId","limit","get","type","data","e","console","log","error","bookSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,GAAhD,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,kBAJP,C,CAMA;;AACA,UAAUC,cAAV,GAA2B;AACzB,QAAMP,QAAQ,CAAC,IAAD,EAAOI,kBAAP,EAA2B,UAAUI,SAAV,CAAoBC,MAApB,EAA4B;AACnE,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMZ,IAAI,CAAC,CAACa,MAAM,GAAG,CAAV,EAAaC,KAAK,GAAG,EAArB,KAA4B;AACpD,eAAOT,KAAK,CAACU,GAAN,CAAW,iBAAgBF,MAAO,UAASC,KAAM,EAAjD,CAAP;AACD,OAFwB,EAEtBH,MAAM,CAACE,MAFe,CAAzB;AAGA,YAAMT,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAET,kBADE;AAERU,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,OAAD,CAAT;AAID,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMd,GAAG,CAAC;AACRY,QAAAA,IAAI,EAAER,kBADE;AAERa,QAAAA,KAAK,EAAEH;AAFC,OAAD,CAAT;AAID;AACF,GAhBa,CAAd;AAiBD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACE,IAAI,CAACQ,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, throttle, takeLatest, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_BOOKS_REQUEST,\r\n  LOAD_BOOKS_SUCCESS,\r\n  LOAD_BOOKS_FAILURE,\r\n} from '../reducers/book';\r\n\r\n// 전체 연재글 가져오기\r\nfunction* watchLoadBooks() {\r\n  yield throttle(1000, LOAD_BOOKS_REQUEST, function* loadBooks(action) {\r\n    try {\r\n      const result = yield call((lastId = 0, limit = 20) => {\r\n        return axios.get(`/books?lastId=${lastId}&limit=${limit}`);\r\n      }, action.lastId);\r\n      yield put({\r\n        type: LOAD_BOOKS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      yield put({\r\n        type: LOAD_BOOKS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default function* bookSaga() {\r\n  yield all([fork(watchLoadBooks)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}